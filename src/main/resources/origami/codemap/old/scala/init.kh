# scala/init.kh

Bool       = Boolean
Int        = Int
Float      = Double
String     = String

null       = null

# Bool
true:Bool       = true
false:Bool      = false
&:Bool:Bool:Bool = (%s && %s)
|:Bool:Bool:Bool = (%s || %s)
!:Bool:Bool      = (!(%s))

#Int
0:Int            = %d
+:Int:Int        = +%s
-:Int:Int        = -%s
+:Int:Int:Int    = (%s + %s)
-:Int:Int:Int    = (%s - %s)
*:Int:Int:Int    = (%s * %s)
/:Int:Int:Int    = (%s / %s)
%:Int:Int:Int    = (%s % %s)

==:Int:Int:Bool  = %s == %s
!=:Int:Int:Bool  = %s != %s
<:Int:Int:Bool   = %s < %s
>:Int:Int:Bool   = %s > %s
<=:Int:Int:Bool  = %s <= %s
>=:Int:Int:Bool  = %s >= %s

<<:Int:Int:Int   = (%s << %s)
>>:Int:Int:Int   = (%s >> %s)
&:Int:Int:Int    = (%s & %s)
|:Int:Int:Int    = (%s | %s)
^:Int:Int:Int    = (%s ^ %s)
!:Int:Int        = ~%s

# Float
0:Float       = %f
Int=>Float           = (%s).toDouble
Float->Int           = (%s).toInt
+:Float:Float        = +%s
-:Float:Float        = -%s
+:Float:Float:Float    = (%s + %s)
-:Float:Float:Float    = (%s - %s)
*:Float:Float:Float    = (%s * %s)
/:Float:Float:Float    = (%s / %s)
%:Float:Float:Float    = (%s % %s)

==:Float:Float:Bool  = %s == %s
!=:Float:Float:Bool  = %s != %s
<:Float:Float:Bool   = %s < %s
>:Float:Float:Bool   = %s > %s
<=:Float:Float:Bool  = %s <= %s
>=:Float:Float:Bool  = %s >= %s

#Syntax

comment          = // %s
begin            = {
end              = }
;                =
,                = ,
()               = (%s)

module           = object $|base| {

functype         = (%3$s) => %1$s

const            = private val %2$s: %1$s = %3$s

val              = (define %2$s %3$s)
var              = (define %2$s %3$s)

function         = private def %2$s(%3$s): %1$s = {
function         = def %2$s[T](%3$s): %1$s = {
#return           = return %s;

#funcref          = (p) => %s(p)

if               = if(%s) {
else if          = else if(%s) {
while            = while(%s) {
switch           = %s match {
case             = case %s => %s
default          = case _ => %s
ifexpr           = (if (%s) %s else %s)

lambda           = (%s) => %s
