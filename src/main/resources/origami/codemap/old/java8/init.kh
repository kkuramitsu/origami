# java8/init.kh

#Syntax

comment          = /*%s*/
line comment     = //%s
begin            = {
end              = }
;                = ;
,                = ,
group            = (%s)

module           = public class %1$s {
end module       = }

functype         = '''
@FunctionalInterface
public interface %1$s {
  public %2$s apply(%3$s);
}

'''

const            = private static final %1$s %2$s = %3$s;
public const     = private static final %1$s %2$s = %3$s;

function         = private static final %1$s %2$s(%3$s) {
public function  = public static final %1$s %2$s(%3$s) {
return           = return %s;

if               = if(%s) {
else             = else {
while            = while(%s) {
switch           = switch(%s) {
case             = case %s : %s
#default         = default : %s

ifexpr           = (%1$s ? %2$s : %3$s)
lambda           = (%1$s) -> %2$s

apply            = %s.apply
funcref          = %2$s::%1$s

array            = Arrays.asList(new %1$s[]{
end array        = })

class            = class %1$s%2$s {
end class        = }

class field      = '''
	private %2$s _%3$s;
	public %2$s %3$s() { return _%3$s; }
	public void %3$s(%2$s %3$s) { _%3$s = %3$s; } 
'''

fieldtype         = '''
public interface F%3$s {
	public %2$s %3$s();
	public void %3$s(%2$s %3$s); 
}

'''


Bool             = boolean
Int              = int
Float            = double
String           = String
Option[a]        = %s
Array[a]         = %s[]
Array'[a]        = %s[]
List[a]          = Stream<%s>
List'[a]         = List<%s>
Dict[a]          = TreeMap<String,%s>
Dict'[a]         = TreeMap<String,%s>
Data             = HashMap<String,Object>

#Boxed type
Bool^            = Boolean
Int^             = Integer
Float^           = Double

null       = null

# Bool
true:Bool         = true
false:Bool        = false
&&:Bool:Bool:Bool = %s && %s
||:Bool:Bool:Bool = %s || %s
!:Bool:Bool       = !(%s)

#Int 
0:Int            = %d
+:Int:Int        = +%s
-:Int:Int        = -%s
+:Int:Int:Int    = %s + %s
-:Int:Int:Int    = %s - %s
*:Int:Int:Int    = %s * %s
/:Int:Int:Int    = %s / %s
%:Int:Int:Int    = %s %% %s

==:Int:Int:Bool  = %s == %s
!=:Int:Int:Bool  = %s != %s
<:Int:Int:Bool   = %s < %s
>:Int:Int:Bool   = %s > %s
<=:Int:Int:Bool  = %s <= %s
>=:Int:Int:Bool  = %s >= %s

<<:Int:Int:Int   = (%s << %s)
>>:Int:Int:Int   = (%s >> %s)
&:Int:Int:Int    = (%s & %s)
|:Int:Int:Int    = (%s | %s)
^:Int:Int:Int    = (%s ^ %s)
!:Int:Int        = ~%s

# Float
0:Float       = %f
Int=>Float           = (double)%s
Float->Int           = (int)%s
+:Float:Float        = +%s
-:Float:Float        = -%s
+:Float:Float:Float    = (%s + %s)
-:Float:Float:Float    = (%s - %s)
*:Float:Float:Float    = (%s * %s)
/:Float:Float:Float    = (%s / %s)
%:Float:Float:Float    = (%s %% %s)

==:Float:Float:Bool  = %s == %s
!=:Float:Float:Bool  = %s != %s
<:Float:Float:Bool   = %s < %s
>:Float:Float:Bool   = %s > %s
<=:Float:Float:Bool  = %s <= %s
>=:Float:Float:Bool  = %s >= %s

