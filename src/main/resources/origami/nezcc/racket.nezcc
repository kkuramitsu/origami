# nezcc file

extension          = rkt

# type

Byte[]->String   = (make-bytes 1 %s)
String->Byte[]   = (bytes-ref %s 0)

#Byte[].get       = (string->bytes/utf-8 (substring %1$s %2$s (+ %2$s 1)))
#Byte[].quote     = "%s"

Array.size       = (vector-length %s)
Array.get        = (vector-ref %s %s)
Array.new        = (make-vector %2$s)
Array.slice      = (vector-drop (vector-take %1$s %3$s) %2$s)

#In case of AST2
TreeList            = TreeList%
TreeList.empty      = null
TreeList.cons       = (new TreeList%% [label %s] [tree %s] [next %s])

# syntax

comment          = ; %s
begin            = (
end              = )
;                =

module           = #lang racket

struct           = (define %s%% (class object%% (super-new)
constructor      = (init %2$s)
end constructor  = )
init             = (field [_%s %s])
#field            = (field [_%s %s])

getter           = (get-field _%2$s %1$s)
setter           = (set-field! _%2$s %1$s %3$s)

const            = (define %2$s %3$s)

function         = (define (%2$s %3$s)
param            = %2$s
params           =$|space|
return           = %s
block            =

and              = (and %s %s)
or               = (or %s %s)
not              = (not %s)
eq               = (= %s %s)
>                = (> %s %s)
<                = (< %s %s)
+                = (+ %s %s)
-                = (- %s %s)
*                = (* %s %s)
/                = (/ %s %s)
%                = (modulo %s %s)


ifexpr           = (if %1$s (begin %2$s) (begin %3$s))
# FIXME divide class const
funccall         = (%s %s)
args             =

true             = #t
false            = #f
null             = null

val              = (define %2$s %3$s)
var              = (define %2$s %3$s)
assign           = (set! %s %s)

array            = (vector$|space|
arrays           =$|space|
end array        = )
if               = (if %s
switch           = (match %s
case             = [%s %s]
default          = [_ %s]

lambda           = (lambda (%s) %s)

group            = %s

def newtree = '''
(define TreeList% (class object% (super-new)
  (init label tree next)
    (field [_label label])
    (field [_tree tree])
    (field [_next next])

    (define/public (strOut sb)
      (define cur this)
      (send cur rStrOut cur sb)
    )

    (define/private (rStrOut cur sb)
      (if (null? cur)
        void
        (begin
          (set! sb (string-append sb " "))
          (if (and (not (null? (get-field _label cur))) (> (string-length (get-field _label cur)) 0))
            (set! sb (string-append (string-append (string-append sb "$") (get-field _label cur)) "="))
            void
          )
          (send (get-field _tree cur) strOut sb)
          (send cur rStrOut (get-field _next cur) sb)
        )
      )
    )
  )
)

(define Tree% (class object% (super-new)
  (init key value)
    (field [_key key])
    (field [_value value])

    (define/public (toString )
      (define sb "")
      (send this StrOut sb)
      sb
    )

    (define/private (strOut sb)
      (set! sb (string-append sb "[#"))
      (set! sb (string-append sb (get-field _key this)))
      (if (is-a? (get-field _value this) TreeList%)
        (send (get-field _value this) strOut sb)
        (begin
          (set! sb (string-append sb " '"))
          (set! sb (string-append sb (get-field _value this)))
          (set! sb (string-append sb "'"))
        )
      )
      (set! sb (string-append sb "]"))
    )

  )
)

(define (newtree tag inputs pos epos subs)
  (new Tree% [key tag] [value (if (null? subs) (vector-drop (vector-take inputs epos) pos) subs)])
)
'''

# else
def backpos = '''
(define (backpos px pos)
  (if (< (get-field _headpos px) pos)
    (set-field! _headpos px pos)
    #f
  )
  pos
)
'''
# to return byte
def nextbyte = '''
(define (nextbyte px)
  (define c (vector-ref (get-field _inputs px) (get-field _pos px)))
  (set-field! _pos px (+ (get-field _pos px) 1))
  (if (bytes? c) (bytes-ref c 0) 0 )
)
'''

# end 0
def getbyte = '''
(define (getbyte px)
 (define b (vector-ref (get-field _inputs px) (get-field _pos px) ))
 (if (bytes? b) (bytes-ref b 0) 0 )
)
'''

def logT = '''
(define (logT px lop lpos tree)
  (define treeLog (new TreeLog% [lop lop] [lpos lpos] [ltree tree] [lprev (get-field _treeLog px)] ))
  (set-field! _treeLog px treeLog)
  #t
)
'''

memoentries        = $|memoentries|

def parse = '''
(define (rMemo memos tree cnt length)
  (if (< cnt length)
      (begin
        (vector-set! memos cnt (new MemoEntry% [key -1] [mpoint -1] [result 0] [mpos 0] [mtree tree] [mstate null]))
        (rMemo memos tree (+ cnt 1) length)
      )
      (begin memos)
      )
)

(define (newMemos tree length)
  (rMemo (make-vector length) tree 0 length)
)

(define (parse inputs length)
  (define tree (newtree (gettag 0) inputs 0 length null))
  (define px (new NezParserContext% [inputs inputs] [length length] [pos 0] [headpos 0] [tree tree] [treeLog (new TreeLog% [lop 0] [lpos 0] [ltree tree] [lprev null])] [state null] [memos (newMemos tree $|memoentries|)]));
  (set! tree (if (e0 px) (begin (get-field _tree px)) (begin (newtree (gettag nezerror) inputs (get-field _headpos px) length null))))
  tree
)
'''

imports = '''
'''

libs = '''
'''

def newAST = '''
'''

def subAST = '''
'''

main = '''
(define (print_tlist t)
  (print (string-append* (list " $" (get-field _label t) "=")))
  (print_tree (get-field _tree t))
  (define next (get-field _next t))
  (if (null? next) null (print_tlist next))
)

(define (print_tree tree)
  (print (string-append* (list "[" (get-field _key tree))))
  (define t (get-field _value tree))
  (if (vector? t)
      (print (bytes-append* (vector->list t)))
      (print_tlist t)
  )
  (print "]")
)

(define (read_inputs file-name)
  (let ((p (open-input-file file-name)))
    (let loop((ls1 (make-vector 0 null)) (c (read-byte p)))
      (if (eof-object? c)
	  (begin
	    (close-input-port p)
	    (vector-append ls1 (vector 0)))
	  (loop (vector-append ls1 (vector (list->bytes (cons c '())))) (read-byte p))))))

(define (parse_inputs i len args)
  (define buf (read_inputs (vector-ref args i)))
  (define st (current-inexact-milliseconds))
  (define t (parse buf (- (vector-length buf) 1)))
  (define et (current-inexact-milliseconds))
  (print (vector-ref args i))
  (print " ")
  (print (- et st))
  (print "[ms]: ")
  (newline)
  (print_tree t)
  (newline)
  (set! i(+ i 1))
  (if (> i (- len 1))
      "finish"
      (parse_inputs i len args)
  )
)

(define (main args)
  (define i 0)
  (define len (vector-length args))
  (parse_inputs i len args)
)

(main (current-command-line-arguments)
'''
# Match the number of parentheses

man = '''

=============
 QUICK START
=============

raco make $|base|.rkt
racket compiled/$|base|_rkt.zo <file>

or

racket $|base|.rkt <file>

'''
