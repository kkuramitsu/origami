# nezcc file

options            = duallink
extension          = fs

# type

Bool               = bool
Byte               = byte
Int                = int
String             = string
Array              = array<%s>
Tree               = 't

Byte->Int          = (int %s)


Int64              = uint64
Int64->Int         = (int (%s))
Int->Int64         = (uint64 %s)
String->Byte[]     = System.Text.Encoding.ASCII.GetBytes(%s)
String.+0          = (%s + "\0")
Int8''             = %suy

# If 32bit-length integer exists,
Int32             = int32

Array.size        = %s.Length
Array.get         = %s.[%s]
Array.new         = Array.zeroCreate %2$s

Byte[].slice      = %s.[%s..%s]


Option             = %s option
Some               = Some(%s)
None               = None
Option.get         = (Option.get %s)
Option.isNone      = (Option.isNone %s)

# syntax

comment          = // %s
begin            =
end              =
;                =
delim            = $|space|

module           = module $|base|

structname       = %s<'t>

struct           = type %s<'t> = {%s}
record           = mutable %2$s: %1$s
records          = ;

object           = (* %1$s *){%2$s}
objectparam      = %1$s=%2$s
objectparams     = ;

getter           = %s.%s
setter           = %s.%s <- %s

functype         = %3$s -> %1$s
functypeparam    = %1$s
functypeparams   = $|space|->$|space|

const            = let private %2$s: %1$s = %3$s

function         = let private %2$s %3$s: %1$s =
param            = (%2$s: %1$s)
params           = $|space|
function1        = let %2$s %3$s: %1$s =
function2        = let rec %2$s %3$s: %1$s =
function4        = and %2$s %3$s: %1$s =
dummypeg         = '''
let rec dummy n  = dummy 1
'''

funccall         = (%s %s)
arg              = (%s)
args             =

#cast             = (%s)(%s)

//apply          = %s
funcref          = %s
lambda           = (fun %s -> %s)

if               = if %s then
else if          = else if %s then
while            = while %s do
switch           = match (int %s) with
case             = | %s -> %s
default          = | _ -> %s


ifexpr           = if %s then %s else %s

letin            = let %2$s: %1$s = %3$s in %4$s
val              = let %2$s: %1$s = %3$s in
var              = let mutable %2$s: %1$s = %3$s in
assign           = %s <- %s

array            = [|
arrays           = ;
end array        = |]

eq               = %s = %s
ne               = %s <> %s
not              = not %s
&                = %s &&& %s
<<               = %s <<< %s

##
def newMemos = '''
let newMemos (tree: 't) (length: int): array<MemoEntry<'t>> =
  Array.init<MemoEntry<'t>> length (fun x -> {key=(uint64 -1);result=0;mpos=0;mtree=tree;mstate=None})
'''

## Default AST

Symbol           = $|String|

def AST          = '''
type Tree = {
  tag: string
  text: string
  subs: array<string * Tree>
}
'''

def newAST = '''
let newAST (tag: string) (inputs: byte array) (pos: int) (epos: int) (size: int) =
  (tag, inputs.[pos..epos], size)
'''

def subAST = '''
let subAST parent n label child = parent
'''

imports = '''
'''

libs = '''
open System.IO
'''

main = '''
let readinputs (a: string) =
  if File.Exists(a) then
    let buf = File.ReadAllBytes a
    Array.append buf [|0uy;0uy|]
  else
    System.Text.Encoding.ASCII.GetBytes(a + "\0")

[<EntryPoint>]
let main args =
  for a in args do
    let buf = readinputs a
    let timer = new System.Diagnostics.Stopwatch()
    timer.Start()
    let t = parse buf ((Array.length buf) - 2) newAST subAST
    eprintf "%s %i[ms]: " a timer.ElapsedMilliseconds
    printf "%O" t
    eprintfn ""
  0
'''

man = '''
=============
 QUICK START
=============

 fsharpc $|base|.fs
 mono $|base|.exe <file> or <input-text>

 '''
