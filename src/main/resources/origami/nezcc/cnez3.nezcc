# cnez3.nezcc
# very fast c parser recipe 

extension          = c

# type

Bool               = int
Byte               = unsigned char
Byte[]             = unsigned char *
Int                = long
Int32              = int
Int64              = unsigned long long int
Array              = %s*
Symbol             = char *
Tree               = void *
String             = const char *

Tpx                = struct NezParserContext *
TtreeLog           = struct TreeLog *
Tstate             = struct State *
Tm                 = struct MemoEntry *
Tmemos             = struct MemoEntry *
Ts                 = const int *

# unsigned         = %s & 0xff
Int64->Int         = (size_t)(%s)

# syntax

comment            = // %s
begin              = {
end                = }
delim              = ,

struct           = struct %s {
end struct       = };
field            = %s %s;
malloc           = (struct %1$s *)_malloc(sizeof (struct %1$s))

functype         = typedef %1$s (*%2$s)(%3$s);

const            = static const %1$s %2$s = %3$s;
const_array      = static const %1$s %2$s[%3$s] = %4$s;

prototype        = static %s %s(%s);
function         = static %s %s(%s) {
return           = return %s;

getter           = %s->%s
setter           = %s->%s = %s;

#alen            = strlen(%s)
aindex           = %s[%s]
anew             = (struct %1$s *)_malloc(sizeof(struct %1$s) * %2$s)

cast             = (%s)(%s)

true             = 1
false            = 0
null             = NULL

if               = if(%s) {
else if          = else if(%s) {
while            = while(%s) {
switch           = switch(%s) {
case             = case %s : %s
#default          = default : %s

#varprefix        = _
#funcprefix       = _

#lambda     = (%s) -> %s

imports = '''
/* CNEZ */

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>
#ifndef _WIN32
#include<sys/time.h> // for using gettimeofday
#endif

struct NezParserContext;  // avoid referencing

/* local malloc */
#define _malloc malloc
#define _calloc calloc
#define _free   free

'''

def next2 = '''
static int next2(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 2;
  return c1[0] == c2[0] && c1[1] == c2[1];
}
'''

def next3 = '''
static int next3(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 3;
  return c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2];
}
'''

def next4 = '''
static int next4(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 4;
  return c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2] && c1[3] == c2[3];
}
'''

def next5 = '''
static int next5(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 5;
  return c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2] && c1[3] == c2[3] && c1[4] == c2[4];
}
'''

def next6 = '''
static int next6(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 6;
  return c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2] && c1[3] == c2[3] && c1[4] == c2[4] && c1[5] == c2[5];
}
'''

def next7 = '''
static int next7(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 7;
  return c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2] && c1[3] == c2[3] && c1[4] == c2[4] && c1[5] == c2[5] && c1[6] == c2[6];
}
'''

def next8 = '''
static int next8(struct NezParserContext *px, const $|Byte[]|  c2) {
  $|Byte[]| c1 = px->inputs + px->pos;
  px->pos += 8;
  return c1[0] == c2[0] && c1[1] == c2[1] && c1[2] == c2[2] && c1[3] == c2[3] && c1[4] == c2[4] && c1[5] == c2[5] && c1[6] == c2[6] && c1[7] == c2[7];
}
'''

def newMemos = '''
static struct MemoEntry * newMemos(int size) {
  int cnt = 0;
  struct MemoEntry * memos = (struct MemoEntry *)_calloc(sizeof(struct MemoEntry), size);
  while(cnt < size) {
    memos[cnt].key = -1LL;
    cnt = cnt + 1;
  }
  return memos;
}
'''

def longkey = '''
static unsigned long long int longkey($|Int64| pos, int memoPoint) {
  return pos * MEMOSIZE + memoPoint;
}
'''

def getMemo = '''
static struct MemoEntry* getMemo(struct NezParserContext* px, $|Int64| key) {
  return px->memos + (($|Int64|)(key % MEMOS));
}
'''

def bitis = '''
static inline int bitis(const int *bits, size_t n)
{
  return (bits[n / 32] & (1 << (n % 32))) != 0;
}
'''

def extract = '''
static $|Tpos| extract(struct NezParserContext *px, long pos) {
  return px->inputs + pos;
}
'''

def nextN = '''
static int nextN(struct NezParserContext *px, const void *text, size_t len) {
  if (px->pos + len < px->length && memcmp(px->inputs + px->pos, text, len) == 0) {
    px->pos += len;
    return 1;
  }
  return 0;
}
'''

ast = '''
/* Tree */
typedef struct Tree {
  $|Symbol| key;
  $|Int|  size;
  void      *value;
} Tree;

static void *Tree_new($|Symbol| tag, $|Byte[]| inputs, $|Int| pos, $|Int| epos, $|Int| nsubs)
{
  Tree *t = (Tree*)_malloc(sizeof(struct Tree));
  t->key  = tag;
  if(nsubs == 0) {
    $|Byte[]|  p = inputs + pos;
    t->size = (int)(-(epos-pos));
    t->value = (void*)p;
  }
  else {
    t->size = nsubs;
    t->value = _calloc(nsubs, sizeof(Tree));
  }
  return t;
}

static void* Tree_set(void *parent, $|Int| n, $|Symbol| label, void *child)
{
  Tree *t = (Tree*)parent;
  assert(t->size > 0);
  Tree *sub = (Tree *)t->value;
  sub[n].key = label;
  sub[n].value = child;
  return parent;
}

static void Tree_dump(Tree *t, FILE *fp)
{
  size_t i;
  if(t == NULL) {
    fputs("null", fp);
    return;
  }
  fputs("[#", fp);
  fputs(t->key != NULL ? t->key : "", fp);
  if(t->size <= 0) {
    const char *text = t->value;
    fputs(" '", fp);
    for(i = 0; i < -(t->size); i++) {
      fputc(text[i], fp);
    }
    fputs("'", fp);
  }
  else {
    Tree *sub = t->value;
    for(i = 0; i < t->size; i++) {
      fputs(" ", fp);
      fputs("$", fp);
      fputs(sub[i].key != NULL ? sub[i].key : "", fp);
      fputs("=", fp);
      Tree_dump(sub[i].value, fp);
    }
  }
  fputs("]", fp);
}

static void Tree_free(Tree *t)
{
  if(t == NULL) return ;
  if(t->size > 0) {
    size_t i = 0;
    Tree *sub = t->value;
    for(i = 0; i < t->size; i++) {
      Tree_free((Tree*)sub[i].value);
    }
    _free(t->value);
  }
  _free(t);
}
'''

exports = '''
static void TreeLog_free(struct TreeLog *t)
{
  while(t != NULL) {
    struct TreeLog *next = t->nextLog;
    _free(t);
    t = next;    
  }
}

static void NezParserContext_free(struct NezParserContext *px)
{
  if(px->memos != NULL) {
    _free(px->memos);
    px->memos = NULL;
  }
  TreeLog_free(px->treeLog);
  _free(px);
}

void *Nez_parse(const char *inputs, TreeFunc fnew, TreeSetFunc fset)
{
  struct NezParserContext *px = NezParserContext(
    ($|Byte[]|)inputs, strlen(inputs), 0, 0, 
    NULL, TreeLog(0, 0, NULL, NULL, NULL), 
    fnew, fset, NULL, newMemos(MEMOS)
  );
  void *result = NULL;
  if(e0(px)) {
    result = px->tree;
  }
  NezParserContext_free(px);
  return result;
}


Tree *Nez_parseTree(const char *inputs)
{
  return (Tree *)Nez_parse(inputs, Tree_new, Tree_set);
}
'''

main = '''
const char *Nez_readInput(const char *path)
{
    FILE *fp = fopen(path, "rb");
    if(fp != NULL) {
        size_t len;
        fseek(fp, 0, SEEK_END);
        len = (size_t) ftell(fp);
        fseek(fp, 0, SEEK_SET);
        char *buf = (char *) _calloc(1, len + 1);
        size_t readed = fread(buf, 1, len, fp);
        if(readed != len) {
            fprintf(stderr, "read error: %s\n", path);
            exit(1);
        }
        fclose(fp);
        return (const char*)buf;
    }
    return path;
}


static double timediff(struct timeval *s, struct timeval *e)
{
	double t1 = (e->tv_sec - s->tv_sec) * 1000.0;
	double t2 = (e->tv_usec - s->tv_usec) / 1000.0;
	return t1 + t2; /* ms */
}

int main(int ac, const char **av)
{
  int j;
  size_t len;
  if(ac == 1) {
    fprintf(stdout, "Usage: %s file [or 'input-text']\n", av[0]);
    return 1;
  }
  for(j = 1; j < ac; j++) {
    const char *inputs = Nez_readInput(av[j]);
#ifndef _WIN32
    struct timeval s, e;
	gettimeofday(&s, NULL);
    Tree *data = Nez_parseTree(inputs);
	gettimeofday(&e, NULL);
    fprintf(stderr, "%s %s %f[ms]: ", av[j], data != NULL ? "OK" : "NG", timediff(&s, &e));
#else
    Tree *data = Nez_parseTree(inputs);
    fprintf(stdout, "%s: ", av[j]);
#endif
    Tree_dump(data, stdout);
    fflush(stdout);
    fprintf(stderr, "\n");
    Tree_free(data);
    if(av[j] != inputs) {
      _free((void*)inputs);
    }
  }
  return 0;
}
'''

man1 = '''
=============
 INTEGRATION
=============

Just call the following function to parse a tree.

Tree *Nez_parseTree(const char *inputs);

Example (in $|base|.c) 

   Tree *t = Nez_parseTree("sometext");
   if(t != NULL) {
      Tree_dump(t);
   }

NOTE: This parser has no GC support for trees. 
Add some reference counting for trees.

=============
 QUICK START
=============
 
 make $|base| CFLAGS='-g -O3'
 ./$|base| <file> or <input-text>
 
Read the main function. You will know how to
integrate the parser into your programs.
'''
