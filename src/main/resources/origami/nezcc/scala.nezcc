# nezcc file

options            = duallink
extension          = scala

# type

Bool               = Boolean
Byte               = Byte
Int                = Int
String             = String
Array              = Array[%s]
Int64              = Long
Tree               = T

Byte->Int          = %s & 0xff
Int64->Int         = (%s).toInt
String->Byte[]     = (%s).getBytes("UTF-8")
String+0           = (%s + "\u0000")

# If 32bit-length integer exists, 
Int32             = Int

# constant compression
base64           = B("%s")
bools            = B256("%s")

structname         = %s[T]

Array.size        = %s.length
Array.get         = %s(%s)
Array.new         = new Array[%s](%s)

Byte[].slice      = %s.slice(%s, %s)

Option             = Option[%s]
Some               = Some(%s)
None               = None
Option.get         = %s.get
Option.isNone      = %s.isEmpty

# syntax

comment          = // %s
begin            = {
end              = }
;                = 
delim            = ,

module           = object $|base| {

struct           = class %s[T](%s) {
record           = var %2$s: %1$s
records          = ,
new              = new %s

functype         = (%3$s) => %1$s
functypeparam    = %1$s

const            = private val %2$s: %1$s = %3$s

#function         = private val %2$s = (%3$s) => {
function         = private def %2$s[T](%3$s): %1$s = {
param            = %2$s: %1$s
#return           = %s

#cast             = (%s)(%s)

//apply            = %s
funcref          = (p: NezParserContext[T]) => %s(p)

if               = if(%s) {
else if          = else if(%s) {
while            = while(%s) {
switch           = %s match {
case             = case %s => %s
default          = case _ => %s

lambda           = (%s: NezParserContext[T]) => (%s):Boolean

ifexpr           = (if (%s) %s else %s)

letin            = { val %2$s: %1$s = %3$s; %4$s }
val              = val %2$s: %1$s = %3$s
var              = var %2$s: %1$s = %3$s
assign           = %s = %s

array            = Array(
arrays           = ,
end array        = )

## Default AST

Symbol           = String

def AST          = '''
  class SimpleTree(key: $|Symbol|, var value: AnyRef) {
    override def toString = if (value.isInstanceOf[SimpleTree]) s"$key= $value" else s"[#$key $value]"
  }
'''

def newAST = '''
  private def newAST(tag: String,
                     inputs: Array[Byte],
                     pos: Int,
                     epos: Int,
                     size: Int): SimpleTree =
    new SimpleTree(tag,
                   if ((size == 0)) new String(inputs, pos, epos - pos)
                   else new Array[SimpleTree](size))
'''

def subAST = '''
  private def subAST(parent: SimpleTree,
                     n: Int,
                     label: String,
                     child: SimpleTree): SimpleTree = {
    val childs: Array[SimpleTree] =
      (parent.asInstanceOf[SimpleTree]).value.asInstanceOf[Array[SimpleTree]]
    childs(n) = new SimpleTree(label, child)
    parent
  }
'''

imports = '''
import java.nio.charset.Charset;
import java.util.Base64;
import java.io.File;
import java.io.FileInputStream;
'''

libs = '''
  def B(s: String): Array[Byte] = Base64.getDecoder.decode(s.getBytes)

  def B256(s: String): Array[Boolean] = {
    val b: Array[Boolean] = Array.ofDim[Boolean](256)
    for (i <- 0 until s.length if s.charAt(i) == 'T' || s.charAt(i) == '1') {
      b(i) = true
    }
    b
  }
'''

main = '''
  def readInputs(a: String): Array[Byte] = {
    val file: File = new File(a)
    if (file.exists()) {
      val buf: Array[Byte] = Array.ofDim[Byte](file.length.toInt + 1)
      val fin: FileInputStream = new FileInputStream(file)
      fin.read(buf, 0, file.length.toInt)
      buf
    }
    else {
      (a + "\u0000").getBytes(Charset.forName("UTF-8"))
    }
  }
      
  def main(args: Array[String]): Unit = {
    for (a <- args) {
      val buf = readInputs(a)
      val st: Long = System.nanoTime()
      val t: SimpleTree = parse(buf, buf.length-1, 
        (tag, inputs, pos, epos, size) => newAST(tag, inputs, pos, epos, size), 
        (parent, n, label, child) => subAST(parent, n, label, child))
      val et: Long = System.nanoTime()
      System.err.printf("" + a + " " +  ((et - st) / 1000000.0) + "[ms] :")
      print(t)
      System.out.flush
      System.err.printf("\n")
    }
  }
'''

man = '''
=============
 QUICK START
=============
 
 scalac $|base|.scala
 scala $|base| <file> or <input-text>

'''

