# nezcc file

extension          = js

# type
Bool               = var
Byte               = var
Byte[]             = var
Int                = var
Int64              = var
Array              = var
Symbol             = var
Tree               = var

Byte[]->String   = %s;
String->Byte[]   = createUTF8BytesFromString(%s);

Array.size       = %s.length
Array.get        = %s[%s]
Array.new        = new Array(%2$s).fill(null)
Array.slice      = %s.slice(%s,%s)

# syntax

comment          = // %s
begin            = {
end              = }
;                = ;
delim            = ,

struct           =
#field           = %s %s;
constructor      = function %s (%2$s){
end constructor  =
new              = new %s
init             = this.%s = %s;

getter           = %s.%s
setter           = %s.%s = %s

const            = %2$s = %3$s
val              = var %2$s = %3$s
var              = $|val|

function         = function %2$s(%3$s){
param            = %2$s
params           = ,
return           = return %s;

#group            = (%s)

and              = (%s) && (%s)
or               = (%s) || (%s)
not              = !(%s)
ifexpr           = ((%1$s) ? (%2$s) : (%3$s))

funccall         = %s(%s)
args             = ,
#apply            = %s.apply
#funcref          = $|base|::%s

true             = true
false            = false
null             = null

val              = var %2$s = %3$s;
var              = var %2$s = %3$s;
assign           = %s = %s;

if               = if (%s){
while            = while (%s){

switch           = switch(%s) {
case             = case %s : %s
default          = default : %s
end switch       = }

lambda           = ((%s) => %s)

array            = [
arrays           = ,
end array        = ]


imports = '''
//function fTrue(px){ return true; }
//function fFalse(px){ return false; }
'''

def newAST = '''
function newAST(tag, inputs, pos, epos, size){
  if (size == 0) {
    return [tag, (inputs.slice(pos,epos))];
   }else{
    return [tag, new Array(size).fill(null)];
   }
}
'''

def subAST = '''
function subAST(parent, n, label, child){
  parent[1][n] = [label, child];
  return parent;
}
'''

main = '''
var fs = require('fs');

(function main(){
    for(var i = 2;i < process.argv.length;i++){
      var inputs = fs.readFileSync('./' + process.argv[i]);
      console.time('timer1');
      var result = parse(inputs,inputs.length-1, newAST, subAST);
      console.timeEnd('timer1');
      console.log(result);
      //以下の関数を使うとObjectの中身まで見れますがxmark10.xmlみたいな大きなファイルの場合にコンソールが凍ります。
      //console.dir(JSON.stringify(result));
    }
})();


'''

man = '''
===================
 QUICK INTEGRATION
===================

Just call $|base|.parse() with an input text. You will get
a key-value tree representation.
Please edit generated sourcefile in function main
'var inputs = fs.readFileSync('FILE_NAME');"

   $ node $|base|.js

Customize TreeFunc and TreeSetFunc in the parse() functions.
See.
'''