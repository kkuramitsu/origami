# perl5.nezcc

extension          = pl

# type

structname         = $
Array.new          = ()
Array.size         = ${%s}
Array.get          = %s->[%s]
Array.slice        = %s[%s:%s]

MemoList          = $
MemoList.new      = ()
MemoList.get      = %s->[%s]
MemoList.add      = push(%s,%s)

#Byte->Int         = %s & 0xff
#Int64->Int         = (%s)
String->Byte[]     = unpack('C*', %s)
Byte[]->String     = pack(%s)
Byte[].slice       = %s->[%s..%s]
# syntax

comment            = # %s
begin              = {
end                = }
delim              = ,

struct           = struct %s => {
end struct       = };
field            = %2$s => '$',
malloc           = %1$s->new()

getter           = %s->%s
setter           = %s->%s(%s);

const            = my $%2$s = %3$s;
array            = [
end array        = ]

function         = '''
sub %2$s {
  my (%3$s) = @_;
'''
param            = %2$s
val              = my %2$s = %3$s;
return           = return %s;

true             = 1
false            = 0
null             = 0

if               = if (%s) {
else if          = elsif (%s) {
while            = while (%s) {
ifexpr           = ((%1$s) ? (%2$s) : (%3$s))
#switch           = switch(%s) {
#case             = case %s : %s
#default          = default : %s

varname          = $%s
constname        = $%s
structname       = $

lambda           = sub { my %1$s = $_[0]; %2$s; }
funcref          = \&%s
apply            = %s->

imports = '''
#!/usr/bin/perl
use strict;
use warnings;
use Class::Struct;
'''

def newMemos = '''
sub newMemos {
  my ($tree,$length) = @_;
  my @memos = ();
  my $cnt = 0;
  while ($cnt < $length) {
    push(@memos,MemoEntry(-1,-1,0,0,$tree,0));
    $cnt = $cnt + 1;
  }
  return \@memos;
}
'''

def newAST = '''
sub newAST {
  my ($tag,$inputs,$pos,$epos,$size) = @_;
  if ($size == 0) {
    return ($tag, $inputs[$pos .. $epos]);
  } else {
    return ($tag, ());
  }
}
'''

def subAST = '''
sub subAST {
  my ($parent,$n,$label,$child) = @_;
  unshift (${$parent->[1]}, ($label, $child));
  return $parent;
}
'''

main = '''
sub readinputs {
  my ($fname) = @_;
  my @inputs = ();
  if(-f $fname) {
    open my $file,'<',$fname or die "Cannot open a file: $fname\n";
    binmode $file;
    my $val;
    while(read($file, $val, 1)){
      push(@inputs, unpack('C', $val));
    }
    close $file;
    push(@inputs, 0);
    push(@inputs, 0);
  }
  else {
    @inputs = unpack('C*', ($fname . '\0')); #2
  }
  return \@inputs;
}

sub main {
  my $fname;
  while($fname = shift(@ARGV)) {
    print "$fname\n";
    my $text = readinputs($fname);
    my $len = scalar(@$text) - 2;
    my $t = parse($text, $len, \&newAST, \&subAST);
    print "$t\n";
  }
}

main()
'''

man = '''
=============
 QUICK START
=============

 perl $|base|.pl <file> or <input-text>

Read the main function. You will know how to
integrate the parser into your programs.
'''
