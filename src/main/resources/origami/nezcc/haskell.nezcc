# nezcc file

extension          = hs

# type

Bool               = Bool
Byte               = Word8
Byte[]             = ByteString
Int                = Int
Int64              = Int64
Array              = (Ar.Vector (%s))
String             = String
Tree               = AST
structname         = %s

Some               = (Just (%s))
None               = Nothing
Option.isNone      = (isNothing (%s))
Option             = (Maybe (%s))
Option.get         = (fromJust (%s))

Int64->Int         = (fromIntegral (%s))
Int->Int64         = (fromIntegral (%s))
Byte->Int          = (fromIntegral (toInteger  (%s)))
String->Byte[]     = pack %s
Byte[]->String     = unpack %s

Array.new          = Ar.empty
Array.size         = (Ar.length %s)
Array.get          = (%s Ar.! %s)
Array.slice        = (Ar.slice %2$s (%3$s - %2$s + 1) %1$s)
const_array        = '''
%2$s :: Ar.Vector %1$s
%2$s = Ar.fromList %4$s
'''
#arraypair          = (%1$s,%2$s)
array              = [
arrays             = ,
end array          = ]


Byte[]''            = (C.pack "%s")
Byte[].quote        = "
Byte[].esc          = \x%02x
Byte[].get          = (%s `index` %s)
Byte[].slice        = ((take (%3$s - %2$s) . drop %2$s) (%1$s))

TreeList            = Ar.Vector AST
TreeList.empty      = Ar.empty
TreeList.cons       = ((Tree (%s) (%s)) `Ar.cons` %s)

MemoList          = Ar.Vector (%s)
MemoList.new      = Ar.empty
MemoList.get      = (%s Ar.! %s)

nezvalues         = nezsyms

# syntax

comment          = -- %s
begin            =
end              =
;                =

#module          = module $|base|(parse) where
#end module      =
struct           = data %1$s = %1$s {%2$s} deriving (Eq,Show)
record           = %2$s :: %1$s
records          = ,

object           = %1$s {%2$s}
objectparam      = %1$s=%2$s
objectparams     = , 

getter           = (%2$s %1$s)
setter           = S.put $ %1$s {%2$s = %3$s}

functype         = (%3$s -> S.State NezParserContext (%1$s))
functypeparam    = (%1$s)
functypeparams   = ->
return           = return (%s)

const            = '''
%2$s :: %1$s
%2$s = %3$s
'''

function         = '''
%2$s :: %4$s
%2$s %3$s = do
'''

param    = %2$s
params   =

true             = True
false            = False
int              = (%s)

val              = let %2$s = %3$s
#let (%2$s :: %1$s) = %3$s
var              = let %2$s = %3$s
#let (%2$s :: %1$s) = %3$s
#assign          = let %s = %s
letin            = let %2$s = %3$s in %4$s

if               = if (%s) then
else if          = else if (%s) then
switch           = case (%s) of
case             = %s -> %s
default          = _ -> %s

and              = %s && %s
or               = (%s) || (%s)
not              = (not (%s))
ifexpr           = (if (%1$s) then (%2$s) else (%3$s))

funccall         = (S.evalState (%s %s) px')
arg              = (%s)
args             =

lambda           = (\%s -> return (%s))

#base64           = B("%s")
#bools            = B256("%s")

varname           = %s'


MEMOSIZE          = memoSize
MEMOS             = memos

TList             = [(String,AST)]
TList.empty       = []
TList.cons        = %s:%s

imports = '''
{-# LANGUAGE FlexibleContexts #-}
module XML(parseText) where
import Prelude hiding (length,log,take,drop)
import Data.Word
import qualified Data.ByteString.Char8 as C
import qualified Control.Monad.State as S
import Data.ByteString hiding (length,replicate)
import Data.Int
import Data.Maybe
import qualified Data.Vector as Ar
import qualified Data.IntMap as Map

'''

ï¼ƒNot reflected
def nezvalues = '''
nezvalues :: [ByteString]
nezvalues = fmap pack [data178, data179]
'''

libs = '''

(%) = mod

data AST = Tree String (Ar.Vector AST)
         | Remainder ByteString
         deriving (Eq,Show)

'''


main = '''

'''

man = '''

'''

#def

setter2          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s}

setter3          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s, %6$s = %7$s}

setter4          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s, %6$s = %7$s, %8$s = %9$s}

setter5          = S.put $ %1$s' {%2$s = %3$s, %4$s = %5$s, %6$s = %7$s, %8$s = %9$s, %10$s = %11$s}

def newMemos   = '''
newMemos tree' length' = Ar.replicate length' MemoEntry { key = -1, result = 0, mpos = 0, mtree = tree', mstate = Nothing}

'''

def storeM = '''
storeM :: ((NezParserContext)->(Int)->(Int)->(Bool) -> S.State (NezParserContext) Bool)
storeM px' memoPoint' pos' matched' = do
  let oldmemo = memos px'
  let key' = (S.evalState (longkey (fromIntegral pos') memoPoint') px')
  let m' = (S.evalState (getMemo px' key') px')
  S.put $ px' {memos =  rewriteList oldmemo key' (m' {key = key', result = if matched' then 1 else 0, mpos = if matched' then pos px' else pos', mtree = tree px', mstate = (state px')})}
  return (matched')
  where
    rewriteList xs i v = let k = fromIntegral i in Ar.update xs (Ar.singleton (k,v))

'''

def backpos = '''
backpos :: ((NezParserContext)->(Int) -> S.State (NezParserContext) Int)
backpos px' pos' = do
  if ((headpos px') < pos') then
    S.put (px' {headpos = pos'}) >> return pos'
    else return (pos')

'''


def endT = '''
gettag :: ((Int) -> S.State (NezParserContext) (String))
gettag ntag' = do
  return ((nezsymbols Ar.! ntag'))

getlabel :: ((Int) -> S.State (NezParserContext) (String))
getlabel nlabel' = do
  return ((nezsymbols Ar.! nlabel'))

getval :: ((Int) -> S.State (NezParserContext) (ByteString))
getval nvalue' = do
  return ((nezvalues Ar.! nvalue'))

getvalen :: ((Int) -> S.State (NezParserContext) (Int))
getvalen nvalue' = do
  return ((nezvaluesizes Ar.! nvalue'))

recT :: ((NezParserContext)->(TreeLog)->(Int)->(Int)->(Int)->(Ar.Vector AST) -> S.State (NezParserContext) AST)
recT px' tcur' ntag' nvalue' epos' subtrees' = do
  return ((if ((lop tcur') == (0)) then ((if (nvalue' == (0)) then (newtree (S.evalState (gettag ntag') px') (inputs px') (lpos tcur') epos' subtrees') else (newtree (S.evalState (gettag ntag') px') (S.evalState (getval nvalue') px') (0) (S.evalState (getvalen nvalue') px') subtrees'))) else ((S.evalState (recT px' (fromJust ((lprev tcur'))) (if (ntag' == (0) && (lop tcur') == (1)) then ((lpos tcur')) else (ntag')) (if (nvalue' == (0) && (lop tcur') == (2)) then ((lpos tcur')) else (nvalue')) epos' (if ((lop tcur') == (3)) then (((Tree ((S.evalState (getlabel (lpos tcur')) px')) (Ar.singleton (ltree tcur'))) `Ar.cons` subtrees')) else (subtrees'))) px'))))

rLog :: ((TreeLog) -> S.State (NezParserContext) ((Maybe (TreeLog))))
rLog tcur' = do
  px' <- S.get
  return ((if ((lop tcur') == (0)) then ((lprev tcur')) else ((S.evalState (rLog (fromJust ((lprev tcur')))) px'))))

endT :: ((NezParserContext)->(Int)->(Int) -> S.State (NezParserContext) (Bool))
endT px' shift' ntag' = do
  S.put $ px' {tree = (S.evalState (recT px' (fromJust ((treeLog px'))) ntag' (0) ((pos px') + shift') Ar.empty) px'), treeLog = (S.evalState (rLog (fromJust ((treeLog px')))) px')}
  return (True)

'''

def parse = '''
parse :: (ByteString)->(Int) -> AST
parse inputs' length' = let tree' = newtree (Ar.head nezsymbols) inputs' 0 length' Ar.empty in
                        let px' = NezParserContext {inputs=inputs'
                             ,length=length'
                             ,pos=0
                             ,headpos=0
                             ,tree=tree'
                             ,treeLog=(Just (TreeLog {lop=0,lpos=0,ltree=tree',lprev=Nothing}))
                             ,state=Nothing
                             ,memos=(newMemos tree' 193)} in
                        let result = S.runState (e0 px') px' in
                        if Prelude.fst result then tree (Prelude.snd result) else newtree (Prelude.show nezerror) inputs' (headpos (Prelude.snd result)) length' Ar.empty

parseText :: String -> AST
parseText text' = let inputs' = C.pack text' in
                  let length' = C.length inputs' - 1 in
                  parse inputs' length'

newtree :: String -> ByteString -> Int -> Int -> Ar.Vector AST -> AST
newtree tag inputs pos epos subs = if Ar.null subs
  then Tree tag (Ar.singleton (Remainder inputs))
  else Ar.head subs

newMemos tree' length' = Ar.replicate length' MemoEntry { key = -1, result = 0, mpos = 0, mtree = tree', mstate = Nothing}

'''
