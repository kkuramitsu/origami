# nezcc file

extension          = swift

# type endT,parse,parses

Bool               = Bool
Byte               = UInt8
Int                = Int
Int32              = Int
Int64              = Int
Array              = [%s]
Symbol             = String
Tree               = Any?
String             = String
null               = nil

array              = [
arrays             = ,
end array          = ]

Byte->Int          = Int(%s)
String->Byte[]     = [UInt8](%s.utf8)

Tf                 = (NezParserContext) -> Bool
TtreeLog           = TreeLog?
Tstate             = State?

unsigned           = Int(%s)
keyindex           = ($|Int|)(%s)

val              = let %2$s: %1$s = %3$s
var              = var %2$s: %1$s = %3$s
assign           = %s = %s

# syntax

comment          = // %s
begin            = {
end              = }
;                =

struct           = class %s{
field            = var %2$s :%1$s
constructor      = init(%2$s) {
init             = self.%s = %s
new              = %s

functype         =

const            = let %2$s :%1$s = %3$s

function         = func %2$s (%3$s) -> %1$s {
param            = _ %2$s :%1$s
params           = ,
return           = return %s

funccall         = %s(%s)
args             = ,
funccallparam    = (%s)

cast             = %s(%s)

alen             = %s.count
aindex           = %1$s[%1$s.index(%1$s.startIndex, offsetBy: %2$s)]
anew             = Array(repeating:nil, count:%2$s) as [%1$s?]
Array.size         = $|alen|
Array.new          = Array(repeating:%1$s(-1,0,0,nil,nil), count:%2$s)

if               = if %s {
else if          = else if %s {
while            = while %s {
switch           = switch %s {
case             = case %s : %s
default          = default : %s

lambda           = {(%s:NezParserContext) -> Bool in return %s}

imports = '''
import Foundation
'''

def NezParserContext = '''
class TreeLog{
  var op :Int
  var log :Int
  var tree :Any?
  var prevLog :TreeLog?
  var nextLog :TreeLog?
  init(_ op :Int,_ log :Int,_ tree :Any?,_ prevLog :TreeLog?,_ nextLog :TreeLog?) {
    self.op = op
    self.log = log
    self.tree = tree
    self.prevLog = prevLog
    self.nextLog = nextLog
  }
}
class State{
  var ntag :Int
  var cnt :Int
  var value :[UInt8]
  var prevState :State?
  init(_ ntag :Int,_ cnt :Int,_ value :[UInt8],_ prevState :State?) {
    self.ntag = ntag
    self.cnt = cnt
    self.value = value
    self.prevState = prevState
  }
}
class MemoEntry{
  var key :Int
  var result :Int
  var pos :Int
  var tree :Any?
  var state :State?
  init(_ key :Int = -1,_ result :Int = 0,_ pos :Int = 0,_ tree :Any? = nil,_ state :State? = nil) {
    self.key = key
    self.result = result
    self.pos = pos
    self.tree = tree
    self.state = state
  }
}
class NezParserContext{
    let inputs :[UInt8]
    let length :Int
    var pos :Int
    let headpos :Int
    var tree :Any?
    var treeLog :TreeLog?
    let newFunc :(String,[UInt8],Int,Int,Int) -> Any?
    let setFunc :(Any?,Int,String,[Any?]) -> Any?
    var state :State?
    var memos :[MemoEntry]
    init(_ inputs :[UInt8],_ length :Int,_ pos :Int,_ headpos :Int,_ tree :Any?,_ treeLog :TreeLog?,_ newFunc :@escaping (String,[UInt8],Int,Int,Int) -> Any?,_ setFunc :@escaping (Any?,Int,String,[Any?]) -> Any?,_ state :State?,_ memos :[MemoEntry]) {
        self.inputs = inputs
        self.length = length
        self.pos = pos
        self.headpos = headpos
        self.tree = tree
        self.treeLog = treeLog
        self.newFunc = newFunc
        self.setFunc = setFunc
        self.state = state
        self.memos = memos
    }
}
func newMemos (_ tree :Any?,_ length :Int) -> [MemoEntry] {
  return Array(repeating:MemoEntry(), count:length)
}
'''
def logT =
def backLink = '''
func useTreeLog (_ px :NezParserContext) -> TreeLog {
    let tcur: TreeLog = px.treeLog!
    if tcur.nextLog == nil {
        tcur.nextLog = TreeLog(0,0,nil,px.treeLog,nil)
    }
    return tcur.nextLog!
}
func logT (_ px :NezParserContext,_ op :Int,_ log :Int,_ tree :Any?) -> Bool {
    let tcur: TreeLog = useTreeLog(px)
    tcur.op = op
    tcur.log = log
    tcur.tree = tree
    px.treeLog = tcur
    return true
}
func backLink (_ px :NezParserContext,_ treeLog :TreeLog?,_ nlabel :Int,_ tree :Any?) -> Bool {
  px.treeLog :TreeLog? = treeLog
  let a = linkT(px,nlabel)
  px.tree = tree
  return a
}
'''

def endT = '''
func gettag (_ ntag :Int) -> String {
  return SYMBOLs[ntag]
}
func getlabel (_ nlabel :Int) -> String {
  return SYMBOLs[nlabel]
}
func getvalue (_ nvalue :Int) -> [UInt8] {
  return VALUEs[nvalue]
}
func getlength (_ nvalue :Int) -> Int {
  return LENGTHs[nvalue]
}
func endT (_ px :NezParserContext,_ shift :Int,_ ntag0 :Int) -> Bool {
    let epos: Int = px.pos + shift
    var tcur: TreeLog = px.treeLog!
    var ntag: Int = ntag0
    var nvalue: Int = 0
    var cnt: Int = 0
    while tcur.op != 0 {
        if tcur.op == 3 {
            cnt = cnt + 1
        }
        else if ntag == 0 && tcur.op == 1 {
            ntag = tcur.log
        }
        else if nvalue == 0 && tcur.op == 2 {
            nvalue = tcur.log
        }
        tcur = tcur.prevLog!
    }
    px.tree = (nvalue == 0) ? (px.newFunc(gettag(ntag),px.inputs,tcur.log,epos,cnt)) : (px.newFunc(gettag(ntag),getvalue(nvalue),0,getlength(nvalue),cnt))
    tcur = px.treeLog!
    while tcur.op != 0 {
        if tcur.op == 3 {
            cnt -= 1
            px.tree = px.setFunc(px.tree,cnt,getlabel(tcur.log),[tcur.tree])
        }
        tcur = tcur.prevLog!
    }
    px.treeLog = tcur.prevLog
    return true
}
'''

def parse = '''
func parse (_ inputs :[UInt8],_ length :Int,_ newFunc :@escaping (String,[UInt8],Int,Int,Int) -> Any?,_ setFunc :@escaping (Any?,Int,String,[Any?]) -> Any?) -> Any? {
    var tree: Any? = newAST(gettag(0),inputs,0,length,0)
    let px: NezParserContext = NezParserContext(inputs,length,0,0,tree,TreeLog(0,0,tree,nil,nil),newFunc ,setFunc ,nil,newMemos(tree,257))
    tree = (e0(px)) ? (px.tree) : (newAST(gettag(ParseError),inputs,px.headpos,length,0))
    return tree
}
func parseText (_ text :String,_ newFunc :@escaping (String,[UInt8],Int,Int,Int) -> Any?,_ setFunc :@escaping (Any?,Int,String,[Any?]) -> Any?) -> Any? {
    let inputs: [UInt8] = [UInt8](text.utf8)
    let length: Int = inputs.count
    return parse(inputs,length,newFunc,setFunc)
}
'''

def newAST = '''
let newAST = {(_ tag :String,_ inputs :[UInt8],_ spos :Int,_ epos :Int,_ n :Int) -> Any? in
    if(n == 0){
      let pre = inputs.prefix(epos)
      return AST(tag,pre.dropFirst(spos).map{$0})
    }else{
      return AST(tag,Array(repeating:AST("",[]), count:n))
  }
}
'''

def subAST = '''
let subAST = {(_ parent :Any?,_ n :Int,_ label :String,_ child :[Any?]) -> Any? in
  var childs = (parent as! AST).value
  if childs.count > n {
    childs[n] = AST(label, child)
  }
  (parent as! AST).value = childs
  return parent
}
'''

AST = '''
class AST{
  var key :String
  var value :[Any?]
  init(_ key :String, _ value :[Any?]){
    self.key = key
    self.value = value
  }
  func print() -> String{
    var out = "[#\(self.key)"
    if self.value is [AST] {
      for val1 in self.value as! [AST] {
        if val1.key != "" {
          out += " $\(val1.key)="
        }else{
          out += " "
        }
        for val2 in val1.value {
          if let val3 = val2 as? AST{
            out += val3.print()
          }
        }
      }
    }else if let val1 = self.value as? [UInt8]{
      let val = String(describing: NSString(bytes:val1, length: val1.count, encoding:String.Encoding.utf8.rawValue)!)
      out += " '\(val)'"
    }
    out += "]"
    return out
  }
}
'''

main = '''
func inputs(_ input:String) -> String {
  if let path = Bundle.main.path(forResource: input, ofType: "txt") {
    if let data = NSData(contentsOfFile: path){
      return String(NSString(data: data as Data, encoding: String.Encoding.utf8.rawValue)! as String)! + "\0"
    }
  }
  return input + "\0"
}

//print(">> ", terminator: "")
let standardInput = FileHandle.standardInput
while true {
  let input = standardInput.availableData
  if input.count == 1 { break }
  let start = Date()
  let str = String(describing: NSString(data:input, encoding:String.Encoding.utf8.rawValue)!)
  let inputString = str.substring(to:str.index(str.endIndex, offsetBy: -1))
  let object = parseText(inputs(inputString), newAST, subAST)
  let time = Double(Date().timeIntervalSince(start)) * 1000
  if let ob = object as? AST{
    print("\(inputString) OK \(time)[ms]: ")
    print(ob.print())
  }else{
    print("\(inputString) NG \(time)[ms]: ")
  }
  //print(">> ", terminator: "")
}
'''

man = '''
=============
 QUICK START
=============

 swift $|base|.swift

=============
 INTEGRATION
=============
'''
