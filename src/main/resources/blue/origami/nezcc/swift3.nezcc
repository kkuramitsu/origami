# nezcc file

extension         = swift

# type

Bool              = Bool
Byte              = UInt8
Int               = Int
Int32             = Int
Int64             = UInt64
Array             = [%s]
Symbol            = String
Tree              = AST
String            = String

Option            = Optional<%s>
Some              = %s
None              = nil
Option.get        = %s!
Option.isNone     = let _ = %s {} else

Byte->Int         = Int(%s)
String->Byte[]    = [UInt8](%s.utf8)

array             = [
arrays            = ,
end array         = ]

Byte->Int         = Int(%s)
String->Byte[]    = [UInt8](%s.utf8)
Int64->Int        = Int(%s)
Int->Int64        = UInt64(%s)

Tf                = (NezParserContext) -> Bool
TnewFunc          = @escaping (String,[UInt8],Int,Int,Int) -> AST
TsetFunc          = @escaping (AST,Int,String,AST) -> AST

keyindex          = Int(%s)

val               = let %2$s: %1$s = %3$s
var               = var %2$s: %1$s = %3$s
assign            = %s = %s

# syntax

comment           = // %s
begin             = {
end               = }
;                 =

struct            = final private class %s{
field             = var %2$s :%1$s
constructor       = init(%2$s) {
init              = self.%s = %s
new               = %s

const             = private let %2$s :%1$s = %3$s

function          = private func %2$s (%3$s) -> %1$s {
param             = _ %2$s :%1$s
params            = ,
return            = return %s
_                 = _

funccall          = %s(%s)
args              = ,
funccallparam     = (%s)

alen              = %s.count
#aindex            = %1$s[%1$s.index(%1$s.startIndex, offsetBy: %2$s)]
Array.size        = $|alen|
#Array.new         = Array(repeating:%1$s(-1,0,0,tree,nil), count:%2$s)

if                = if %s {
else if           = else if %s {
while             = while %s {
switch            = switch %s {
case              = case %s : %s
default           = default : %s

lambda            = {(%s:NezParserContext) -> Bool in return %s}

imports = '''
import Foundation
'''

def NezParserContext = '''
final private class TreeLog{
  var op :Int
  var log :Int
  var tree :AST
  var prevLog :Optional<TreeLog>
  var nextLog :Optional<TreeLog>
  init(_ op :Int,_ log :Int,_ tree :AST,_ prevLog :Optional<TreeLog>,_ nextLog :Optional<TreeLog>) {
    self.op = op
    self.log = log
    self.tree = tree
    self.prevLog = prevLog
    self.nextLog = nextLog
  }
}
final private class State{
  var ntag :Int
  var cnt :Int
  var value :[UInt8]
  var prevState :Optional<State>
  init(_ ntag :Int,_ cnt :Int,_ value :[UInt8],_ prevState :Optional<State>) {
    self.ntag = ntag
    self.cnt = cnt
    self.value = value
    self.prevState = prevState
  }
}
final private class MemoEntry{
  var key :UInt64
  var result :Int
  var pos :Int
  var tree :AST
  var state :Optional<State>
  init(_ key :UInt64,_ result :Int,_ pos :Int,_ tree :AST,_ state :Optional<State>) {
    self.key = key
    self.result = result
    self.pos = pos
    self.tree = tree
    self.state = state
  }
}
final private class NezParserContext{
  var inputs :[UInt8]
  var length :Int
  var pos :Int
  var headpos :Int
  var tree :AST
  var treeLog :Optional<TreeLog>
  var state :Optional<State>
  var memos :[MemoEntry]
  init(_ inputs :[UInt8],_ length :Int,_ pos :Int,_ headpos :Int,_ tree :AST,_ treeLog :Optional<TreeLog>,_ state :Optional<State>,_ memos :[MemoEntry]) {
    self.inputs = inputs
    self.length = length
    self.pos = pos
    self.headpos = headpos
    self.tree = tree
    self.treeLog = treeLog
    self.state = state
    self.memos = memos
  }
}
'''

def newMemos = '''
'''

def logT = '''
private func useTreeLog (_ px :NezParserContext) -> Optional<TreeLog> {
    let tcur: TreeLog = px.treeLog!
    if let _ = tcur.nextLog {} else {
        tcur.nextLog = TreeLog(0,0,px.tree,px.treeLog,nil)
    }
    return tcur.nextLog
}
private func logT (_ px :NezParserContext,_ op :Int,_ log :Int,_ tree :AST) -> Bool {
    let treeLog: TreeLog = useTreeLog(px)!
    treeLog.op = op
    treeLog.log = log
    treeLog.tree = tree
    px.treeLog = treeLog
    return true
}
'''

def endT = '''
private func gettag (_ ntag :Int) -> String {
    return nezsymbols[ntag]
}
private func getlabel (_ nlabel :Int) -> String {
    return nezsymbols[nlabel]
}
private func getvalue (_ nvalue :Int) -> [UInt8] {
    return nezvalues[nvalue]
}
private func getlength (_ nvalue :Int) -> Int {
    return nezvaluesizes[nvalue]
}
private func endT (_ px :NezParserContext,_ shift :Int,_ ntag0 :Int) -> Bool {
    let epos: Int = px.pos + shift
    var tcur: TreeLog = px.treeLog!
    var ntag: Int = ntag0
    var nvalue: Int = 0
    var cnt: Int = 0
    while tcur.op != 0 {
        if tcur.op == 3 {
            cnt = cnt + 1
        }
        else if ntag == 0 && tcur.op == 1 {
            ntag = tcur.log
        }
        else if nvalue == 0 && tcur.op == 2 {
            nvalue = tcur.log
        }
        tcur = tcur.prevLog!
    }
    px.tree = (nvalue == 0) ? (newAST(gettag(ntag),px.inputs,tcur.log,epos,cnt)) : (newAST(gettag(ntag),getvalue(nvalue),0,getlength(nvalue),cnt))
    tcur = px.treeLog!
    while tcur.op != 0 {
        if tcur.op == 3 {
            cnt = cnt - 1
            px.tree = subAST(px.tree,cnt,getlabel(tcur.log),tcur.tree)
        }
        tcur = tcur.prevLog!
    }
    px.treeLog = tcur.prevLog
    return true
}
'''

def parse = '''
private func newMemos (_ tree :AST,_ length :Int) -> [MemoEntry] {
  return Array(repeating:MemoEntry(UInt64.max,0,0,tree,nil), count:length)
}
private func parse (_ inputs :[UInt8],_ length :Int) -> AST {
    var tree: AST = newAST(gettag(0),inputs,0,length,0)
    let px: NezParserContext = NezParserContext(inputs,length,0,0,tree,TreeLog(0,0,tree,nil,nil),nil,newMemos(tree,257))
    tree = (e0(px)) ? (px.tree) : (newAST(gettag(nezerror),inputs,px.headpos,length,0))
    return tree
}
private func parseText (_ text :String) -> AST {
    let inputs: [UInt8] = [UInt8](text.utf8)
    let length: Int = inputs.count
    return parse(inputs,length)
}
'''

def newAST = '''
'''

def subAST = '''
'''

libs = '''
final private class AST{
  var key :String
  var value :[Any]
  init(_ key :String = "", _ value :[Any] = []){
    self.key = key
    self.value = value
  }
  func print() -> String{
    var out = "[#\(self.key)"
    if self.value is [AST] {
      for val1 in self.value as! [AST] {
        if val1.key != "" {
          out += " $\(val1.key)="
        }else{
          out += " "
        }
        if val1.value is [AST] {
          for val2 in val1.value as! [AST] {
            out += val2.print()
          }
        }
      }
    }else if let val1 = self.value as? [UInt8]{
      let val = String(describing: NSString(bytes:val1, length: val1.count, encoding:String.Encoding.utf8.rawValue)!)
      out += " '\(val)'"
    }
    out += "]"
    return out
  }
}
private func newAST (_ tag :String,_ inputs :[UInt8],_ spos :Int,_ epos :Int,_ n :Int) -> AST {
  return AST(tag, n == 0 ? inputs[spos..<epos].map{$0} : Array(repeating:AST(), count:n) )
}
private func subAST (_ parent :AST,_ n :Int,_ label :String,_ child :AST) -> AST {
  parent.value[n] = AST(label, [child])
  return parent
}
'''

main = '''
private func inputs(_ input:String) -> String {
  let currentDirectory = FileManager.default.currentDirectoryPath
  let input0 = currentDirectory + "/" + input
  if FileManager.default.fileExists(atPath: input0) {
    do{
      let fileURL = URL(fileURLWithPath: input0)
      let text = try String(contentsOf: fileURL, encoding: String.Encoding.utf8)
      return (text + "\0")
    }catch{
      return input + "\0"
    }
  }
  return input + "\0"
}

var arguments :[String] = Array(CommandLine.arguments.dropFirst())
while(arguments.count > 0){
  let inputString :String = arguments.first!
  arguments.removeFirst()
  let inputS :String = inputs(inputString)
  let start :Date = Date()
  let object = parseText(inputS)
  let time = Double(Date().timeIntervalSince(start)) * 1000
  print("\(inputString) \(time)[ms]:")
  print(object.print())
}
'''

man = '''
=============
 QUICK START
=============

 swiftc -Ounchecked $|base|.swift
 ./$|base| <file> or <input-text>
 or
 swift -Ounchecked $|base|.swift <file> or <input-text>

Read the main function. You will know how to
integrate the parser into your programs.
'''
