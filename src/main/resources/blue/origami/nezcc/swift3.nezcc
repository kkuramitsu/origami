# nezcc file

extension         = swift

# type

Bool              = Bool
Byte              = UInt8
Int               = Int
Int32             = Int
Int64             = UInt64
Array             = Array<%s>
Symbol            = String
Tree              = AST
String            = String

Option            = Optional<%s>
Some              = %s
None              = nil
Option.get        = %s!
Option.isNone     = let _ = %s {} else

array             = [
arrays            = ,
end array         = ]

Byte->Int         = Int(%s)
String->Byte[]    = Array<UInt8>(%s.utf8)
Int64->Int        = Int(%s)
Int->Int64        = UInt64(%s)

Tf                = (NezParserContext) -> Bool
TnewFunc          = @escaping (String,[UInt8],Int,Int,Int) -> AST
TsetFunc          = @escaping (AST,Int,String,AST) -> AST

keyindex          = Int(%s)

val               = let %2$s: %1$s = %3$s
var               = var %2$s: %1$s = %3$s
assign            = %s = %s

# syntax

comment           = // %s
begin             = {
end               = }
;                 =
delim             = ,

struct            = final private class %s{
field             = var %2$s: %1$s
constructor       = init(%2$s) {
init              = self.%s = %s
new               = %s

const             = private let %2$s: %1$s = %3$s

function          = private func %2$s (%3$s) -> %1$s {
param             = _ %2$s: %1$s
params            = ,
return            = return %s
_                 = _

funccall          = %s(%s)
args              = ,
funccallparam     = (%s)

alen              = %s.count
aindex            = %1$s[%1$s.index(%1$s.startIndex, offsetBy: %2$s)]
Array.size        = $|alen|
#Array.new         = Array(repeating:%1$s(-1,0,0,tree,nil), count:%2$s)

if                = if %s {
else if           = else if %s {
while             = while %s {
switch            = switch %s {
case              = case %s : %s
default           = default : %s

lambda            = {(%s:NezParserContext) -> Bool in return %s}
ifexpr            = %s ? %s : %s

imports = '''
import Foundation
'''

def NezParserContext = '''
final private class TreeLog{
  var lop :Int
  var lpos :Int
  var ltree :AST
  var lprev :Optional<TreeLog>
  init(_ lop :Int, _ lpos :Int, _ ltree :AST, _ lprev :Optional<TreeLog>) {
    self.lop = lop
    self.lpos = lpos
    self.ltree = ltree
    self.lprev = lprev
  }
}
final private class State{
  var ntag :Int
  var cnt :Int
  var value :Array<UInt8>
  var sprev :Optional<State>
  init(_ ntag :Int, _ cnt :Int, _ value :Array<UInt8>, _ sprev :Optional<State>) {
    self.ntag = ntag
    self.cnt = cnt
    self.value = value
    self.sprev = sprev
  }
}
final private class MemoEntry{
  var key :UInt64
  var result :Int
  var mpos :Int
  var mtree :AST
  var mstate :Optional<State>
  init(_ key: UInt64, _ result: Int, _ mpos: Int, _ mtree: AST, _ mstate: Optional<State>) {
    self.key = key
    self.result = result
    self.mpos = mpos
    self.mtree = mtree
    self.mstate = mstate
  }
}
final private class NezParserContext{
  var inputs :Array<UInt8>
  var length :Int
  var pos :Int
  var headpos :Int
  var tree :AST
  var treeLog :Optional<TreeLog>
  var newFunc :(String,Array<UInt8>,Int,Int,Int) -> AST
  var setFunc :(AST,Int,String,AST) -> AST
  var state :Optional<State>
  var memos :Array<MemoEntry>
  init(_ inputs: Array<UInt8>, _ length: Int, _ pos: Int, _ headpos: Int, _ tree: AST, _ treeLog: Optional<TreeLog>, _ newFunc: @escaping (String,Array<UInt8>,Int,Int,Int) -> AST, _ setFunc: @escaping (AST,Int,String,AST) -> AST, _ state: Optional<State>, _ memos: Array<MemoEntry>) {
    self.inputs = inputs
    self.length = length
    self.pos = pos
    self.headpos = headpos
    self.tree = tree
    self.treeLog = treeLog
    self.newFunc = newFunc
    self.setFunc = setFunc
    self.state = state
    self.memos = memos
  }
}
'''

def newMemos = '''
private func newMemos (_ tree :AST,_ length :Int) -> Array<MemoEntry> {
  return Array(repeating:MemoEntry(UInt64.max,0,0,tree,nil), count:length)
}
'''

def newAST = '''
private let newAST = {(_ tag :String,_ inputs :Array<UInt8>,_ spos :Int,_ epos :Int,_ n :Int) -> AST in
  return n == 0 ? AST(tag,(spos,epos)) : AST(tag,Array(repeating:AST(), count:n))
}
'''

def subAST = '''
private let subAST = {(_ parent :AST,_ n :Int,_ label :String,_ child :AST) -> AST in
  parent.value[n] = AST(label, [child])
  return parent
}
'''

libs = '''
final private class AST{
  var key: String = ""
  var value: Array<AST> = []
  var length: (Int, Int) = (-1,-1)
  init(){
  }
  init(_ key: String, _ value: Array<AST>){
    self.key = key
    self.value = value
  }
  init(_ key: String, _ length: (Int, Int)){
    self.key = key
    self.length = length
  }
  func print(_ inputs: Array<UInt8>) -> String{
    var out = "[#\(self.key) "
    if self.value.count != 0 {
      for val1 in self.value {
        if val1.key != "" {
          out += "$\(val1.key)="
        }
        for val2 in val1.value {
            out += val2.print(inputs)
        }
      }
    }else if length != (-1,-1) {
      let val1 = inputs[length.0..<length.1].map{$0}
      let val = String(describing: NSString(bytes:val1, length: val1.count, encoding:String.Encoding.utf8.rawValue)!)
      out += "'\(val)'"
    }
    out += "]"
    return out
  }
}
'''

main = '''
private func inputs(_ input:String) -> String {
  let currentDirectory = FileManager.default.currentDirectoryPath
  let input0 = currentDirectory + "/" + input
  if FileManager.default.fileExists(atPath: input0) {
    do{
      let fileURL = URL(fileURLWithPath: input0)
      let text = try String(contentsOf: fileURL, encoding: String.Encoding.utf8)
      return (text + "\0")
    }catch{
      return input + "\0"
    }
  }
  return input + "\0"
}

var arguments :Array<String> = Array(CommandLine.arguments)
var arr:Array<Double> = []
for i in 1..<arguments.count {
  let inputS :String = inputs(arguments[i])
  let inputByte = Array<UInt8>(inputS.utf8)
  let start = Date()
  let object = parse(inputByte, inputByte.count - 1, newAST, subAST)
  let finish = Date()
  let time = Double(finish.timeIntervalSince(start)) * 1000
  arr += [time]
  //print(object.print(inputByte))
}

for t in 0..<arr.count {
    print("\(arguments[t+1]): \(arr[t])[ms]")
}
'''

man = '''
=============
 QUICK START
=============

 swiftc -Ounchecked $|base|.swift
 ./$|base| <file> or <input-text>
 or
 swift -Ounchecked $|base|.swift <file> or <input-text>

Read the main function. You will know how to
integrate the parser into your programs.
'''
