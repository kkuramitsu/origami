// Chibi-to-JVM Codemap

// Bool
== :: (Bool,Bool)->Bool      => S|blue/origami/asm/APIs|eq
!= :: (Bool,Bool)->Bool      => S|blue/origami/asm/APIs|ne
&& :: (Bool,Bool)->Bool      => X|band
|| :: (Bool,Bool)->Bool      => X|bor
!  :: Bool->Bool             => S|blue/origami/asm/APIs|not
assert:: Bool->()            => S|blue/origami/asm/APIs|testAssert

// Int
+ :: Int->Int           => -
- :: Int->Int           => O|ineg
+ :: (Int,Int)->Int     => O|iadd
- :: (Int,Int)->Int     => O|isub
* :: (Int,Int)->Int     => O|imul
/ :: (Int,Int)->Int     => O|idiv
% :: (Int,Int)->Int     => O|irem

==:: (Int,Int)->Bool    => S|blue/origami/asm/APIs|eq
!=:: (Int,Int)->Bool    => S|blue/origami/asm/APIs|ne
< :: (Int,Int)->Bool    => S|blue/origami/asm/APIs|lt
> :: (Int,Int)->Bool    => S|blue/origami/asm/APIs|gt
<=:: (Int,Int)->Bool    => S|blue/origami/asm/APIs|lte
>=:: (Int,Int)->Bool    => S|blue/origami/asm/APIs|gte

<<:: (Int,Int)->Int     => O|ishl
>>:: (Int,Int)->Int     => O|ishr
&&:: (Int,Int)->Int     => O|iand
||:: (Int,Int)->Int     => O|ior
^^:: (Int,Int)->Int     => O|ixor
~ :: Int->Int           => S|blue/origami/asm/APIs|cmpl
^ :: (Int,Int)->Int     => S|blue/origami/asm/APIs|pow
||:: Int->Int           => S|java/lang/Math|abs

// Float
<=:: Int->Float              => O|i2d
<-:: Float->Int              => O|d2i

+ :: Float->Float            => -
- :: Float->Float            => O|dneg
+ :: (Float,Float)->Float    => O|dadd
- :: (Float,Float)->Float    => O|dsub
* :: (Float,Float)->Float    => O|dmul
/ :: (Float,Float)->Float    => O|ddiv
% :: (Float,Float)->Float    => O|drem

==:: (Float,Float)->Bool  => S|blue/origami/asm/APIs|eq
!=:: (Float,Float)->Bool  => S|blue/origami/asm/APIs|ne
< :: (Float,Float)->Bool  => S|blue/origami/asm/APIs|lt
> :: (Float,Float)->Bool  => S|blue/origami/asm/APIs|gt
<=:: (Float,Float)->Bool  => S|blue/origami/asm/APIs|lte
>=:: (Float,Float)->Bool  => S|blue/origami/asm/APIs|gte
^ :: (Float,Float)->Float => S|java/lang/Math|pow
||:: Float->Int           => S|java/lang/Math|abs
//#rand:Float@            => S|java/lang/Math|random

// Char
<-:: Int->Char            => -
<=:: Char->Int            => S|blue/origami/asm/APIs|toint

==:: (Char,Char)->Bool    => S|blue/origami/asm/APIs|eq
!=:: (Char,Char)->Bool    => S|blue/origami/asm/APIs|ne
< :: (Char,Char)->Bool    => S|blue/origami/asm/APIs|lt
> :: (Char,Char)->Bool    => S|blue/origami/asm/APIs|gt
<=:: (Char,Char)->Bool    => S|blue/origami/asm/APIs|lte
>=:: (Char,Char)->Bool    => S|blue/origami/asm/APIs|gte

//#String

<---:: String->Int         => S|blue/origami/asm/APIs|toint
<---:: String->Float       => S|blue/origami/asm/APIs|todouble
<---:: String->List[Char]  => S|blue/origami/chibi/List$|castFromString
<---:: String->$List[Char] => S|blue/origami/chibi/List$|castFromString
<-- :: Bool->String        => S|blue/origami/asm/APIs|toString
<-- :: Int->String         => S|blue/origami/asm/APIs|toString
<-- :: Float->String       => S|blue/origami/asm/APIs|toString
<-- :: Char->String        => S|blue/origami/asm/APIs|toString
<-- :: List[Char]->String  => V|blue/origami/chibi/List$|castToString
<-- :: $List[Char]->String => V|blue/origami/chibi/List$|castToString

||:: String->Int               => V|java/lang/String|length
++:: (String,String)->String   => V|java/lang/String|concat
==:: (String,String)->Bool     => S|blue/origami/asm/APIs|eq
!=:: (String,String)->Bool     => S|blue/origami/asm/APIs|ne
< :: (String,String)->Bool     => S|blue/origami/asm/APIs|lt
> :: (String,String)->Bool     => S|blue/origami/asm/APIs|gt
<=:: (String,String)->Bool     => S|blue/origami/asm/APIs|lte
>=:: (String,String)->Bool     => S|blue/origami/asm/APIs|gte
println:: String->()           => S|blue/origami/asm/APIs|p

// AnyRef
<=:: AnyRef->a                 => -
<=:: a->AnyRef                 => -
<=:: AnyRef->Bool              => S|blue/origami/asm/APIs|unboxZ
<=:: Bool->AnyRef              => S|blue/origami/asm/APIs|box
<=:: AnyRef->Int               => S|blue/origami/asm/APIs|unboxI
<=:: Int->AnyRef               => S|blue/origami/asm/APIs|box
<=:: AnyRef->Float             => S|blue/origami/asm/APIs|unboxD
<=:: Float->AnyRef             => S|blue/origami/asm/APIs|box
<=:: AnyRef->Char              => S|blue/origami/asm/APIs|unboxC
<=:: Char->AnyRef              => S|blue/origami/asm/APIs|box

//AnyRef==>byte              => S|blue/origami/asm/APIs|unboxB
//byte==>AnyRef              => S|blue/origami/asm/APIs|box
//AnyRef==>char              => S|blue/origami/asm/APIs|unboxC
//char==>AnyRef              => S|blue/origami/asm/APIs|box
//AnyRef==>int64             => S|blue/origami/asm/APIs|unboxL
//int64==>AnyRef             => S|blue/origami/asm/APIs|box

// List[a], $List[a], Stream[a]

||:: List[a]->Int                      => V|blue/origami/chibi/List$|size
[]:: (List[a],Int)->a                  => V|blue/origami/chibi/List$|geti
= :: List[a]->List[a]                  => V|blue/origami/chibi/List$|bind
++:: (List[a],List[a])->List[a]        => V|blue/origami/chibi/List$|connect
cons:: (a,List[a])->List[a]            => S|blue/origami/chibi/List$|cons
tail:: (List[a],a)->List[a]            => V|blue/origami/chibi/List$|tail

//<-:: List[a]->Stream[a]              => V|blue/origami/chibi/List$|stream
<-:: Stream[a]->List[a]                => S|blue/origami/chibi/List$|list
=:: Stream[a]->List[a]                 => S|blue/origami/chibi/List$|list

forEach:: (List[a],a->())->()               => V|blue/origami/chibi/List$|forEach
filter:: (List[a],a->Bool)->Stream[a]       => V|blue/origami/chibi/List$|filter
map::    (List[a],a->b)->Stream[b]             => V|blue/origami/chibi/List$|map
map::    (List[a],a->Int)->Stream[Int]         => V|blue/origami/chibi/List$|map
map::    (List[a],a->Float)->Stream[Float]     => V|blue/origami/chibi/List$|map
reduce:: (List[a],a,(a,a)->a)->a              => V|blue/origami/chibi/List$|reduce

forEach:: (Stream[a],a->())->()               => S|blue/origami/chibi/List$|forEach
filter:: (Stream[a],a->Bool)->Stream[a]       => S|blue/origami/chibi/List$|filter
map::    (Stream[a],a->b)->Stream[b]             => S|blue/origami/chibi/List$|map
map::    (Stream[a],a->Int)->Stream[Int]         => S|blue/origami/chibi/List$|map
map::    (Stream[a],a->Float)->Stream[Float]     => S|blue/origami/chibi/List$|map
reduce:: (Stream[a],a,(a,a)->a)->a              => S|blue/origami/chibi/List$|reduce

<- :: $List[a]->List[a]                 => -
|| :: $List[a]->Int                     => V|blue/origami/chibi/List$|size
[] :: ($List[a],Int)->a                 => V|blue/origami/chibi/List$|geti
[]=:: ($List[a],Int,a)->()              => V|blue/origami/chibi/List$|seti
++ :: ($List[a],$List[a])->$List[a]     => V|blue/origami/chibi/List$|connect
cons:: (a,$List[a])->$List[a]           => S|blue/origami/chibi/List$|cons
tail:: ($List[a],a)->List[a]            => V|blue/origami/chibi/List$|tail
push:: ($List[a],a)->()                 => V|blue/origami/chibi/List$|push
pop::  $List[a]->a                      => V|blue/origami/chibi/List$|pop

//<-:: $List[a]->$Stream[a]                   => V|blue/origami/chibi/List$|stream
<-:: $Stream[a]->$List[a]                   => S|blue/origami/chibi/List$|list
=::  $Stream[a]->$List[a]                   => S|blue/origami/chibi/List$|listM

forEach:: ($Stream[a],a->())->()              => S|blue/origami/chibi/List$|forEach
filter:: ($Stream[a],a->Bool)->$Stream[a]     => S|blue/origami/chibi/List$|filter
map:: ($Stream[a],a->b)->$Stream[b]           => S|blue/origami/chibi/List$|map
map:: ($Stream[a],a->Int)->$Stream[Int]       => S|blue/origami/chibi/List$|map
map:: ($Stream[a],a->Float)->$Stream[Float]   => S|blue/origami/chibi/List$|map
reduce:: ($Stream[a],a,a->a)->a               => S|blue/origami/chibi/List$|reduce

// List[Int], $List[Int], Stream[Int]

||  :: List[Int]->Int                        => V|blue/origami/chibi/List$Int|size
[]  :: (List[Int],Int)->Int                  => V|blue/origami/chibi/List$Int|geti
=   :: List[Int]->List[Int]                  => V|blue/origami/chibi/List$Int|bind
++  :: (List[Int],List[Int])->List[Int]      => V|blue/origami/chibi/List$Int|connect
cons:: (Int,List[Int])->List[Int]            => S|blue/origami/chibi/List$Int|cons
tail:: (List[Int],Int)->List[Int]            => V|blue/origami/chibi/List$Int|tail

//<- :: List[Int]->Stream[Int]                 => V|blue/origami/chibi/List$Int|stream
<- :: Stream[Int]->List[Int]                 => S|blue/origami/chibi/List$Int|list
=  :: Stream[Int]->List[Int]                 => S|blue/origami/chibi/List$Int|list

forEach:: (List[Int],Int->())->()               => V|blue/origami/chibi/List$Int|forEach
filter:: (List[Int],Int->Bool)->Stream[a]       => V|blue/origami/chibi/List$Int|filter
map::    (List[Int],Int->a)->Stream[b]             => V|blue/origami/chibi/List$Int|map
map::    (List[Int],Int->Int)->Stream[Int]         => V|blue/origami/chibi/List$Int|map
map::    (List[Int],Int->Float)->Stream[Float]     => V|blue/origami/chibi/List$Int|map
reduce:: (List[Int],Int,(Int,Int)->Int)->Int              => V|blue/origami/chibi/List$Int|reduce

forEach:: (Stream[Int],Int->())->()               => S|blue/origami/chibi/List$Int|forEach
filter:: (Stream[Int],Int->Bool)->Stream[Int]     => S|blue/origami/chibi/List$Int|filter
map:: (Stream[Int],Int->a)->Stream[a]             => S|blue/origami/chibi/List$Int|map
map:: (Stream[Int],Int->Int)->Stream[Int]         => S|blue/origami/chibi/List$Int|map
map:: (Stream[Int],Int->Float)->Stream[Float]     => S|blue/origami/chibi/List$Int|map
reduce:: (Stream[Int],Int,(Int,Int)->Int)->Int      => S|blue/origami/chibi/List$Int|reduce

|| :: $List[Int]->Int                      => V|blue/origami/chibi/List$Int|size
[] :: ($List[Int],Int)->Int                => V|blue/origami/chibi/List$Int|geti
[]=:: ($List[Int],Int,Int)->()             => V|blue/origami/chibi/List$Int|seti
++ :: ($List[Int],$List[Int])->$List[Int]  => V|blue/origami/chibi/List$Int|connect
cons:: (Int,$List[Int])->$List[Int]        => S|blue/origami/chibi/List$Int|cons
tail:: ($List[Int],Int)->$List[Int]        => V|blue/origami/chibi/List$Int|tail
push:: ($List[Int],Int)->()                => V|blue/origami/chibi/List$Int|push
pop:: $List[Int]->Int                      => V|blue/origami/chibi/List$Int|pop

//<-:: $List[Int]->List[Int]                        => -
<-:: $List[Int]->$Stream[Int]                => V|blue/origami/chibi/List$Int|stream
<-:: $Stream[Int]->$List[Int]                => S|blue/origami/chibi/List$Int|listM
=::  $Stream[Int]->$List[Int]                => S|blue/origami/chibi/List$Int|listM

forEach:: ($Stream[Int],Int->())->()               => S|blue/origami/chibi/List$Int|forEach
filter:: ($Stream[Int],Int->Bool)->$Stream[Int]    => S|blue/origami/chibi/List$Int|filter
map:: ($Stream[Int],Int->a)->$Stream[a]            => S|blue/origami/chibi/List$Int|map
map:: ($Stream[Int],Int->Int)->$Stream[Int]        => S|blue/origami/chibi/List$Int|map
map:: ($Stream[Int],Int->Float)->$Stream[Float]    => S|blue/origami/chibi/List$Int|map
reduce:: ($Stream[Int],Int,(Int,Int)->Int)->Int    => S|blue/origami/chibi/List$Int|reduce








// Dict[a]
||:: Dict[a]->Int                       => V|blue/origami/chibi/Dict$|size
[]:: (Dict[a],String)->Option[a]        => V|blue/origami/chibi/Dict$|get
// = :: Dict[a]->Dict[a]                => V|blue/origami/chibi/Dict$|bind
<--:: Dict[a]->List[String]             => V|blue/origami/chibi/Dict$|keys
forEach:: (Dict[a],(String,a)->())->()  => V|blue/origami/chibi/Dict$|forEach

// $Dict[a]
||:: $Dict[a]->Int                          => V|blue/origami/chibi/Dict$|size
[]:: ($Dict[a],String)->Option[a]           => V|blue/origami/chibi/Dict$|get
[]=:: ($Dict[a],String,a)->()               => V|blue/origami/chibi/Dict$|set
<--:: $Dict[a]->List[String]                => V|blue/origami/chibi/Dict$|keys
forEach:: ($Dict[a],(String,a)->())->()     => V|blue/origami/chibi/Dict$|forEach

// Option
Some:: a->Option[a]                            => -
<---:: Option[a]->a                            => S|blue/origami/asm/APIs|unwrap

Some?:: Option[a]->Bool                        => S|blue/origami/asm/APIs|isSome
None?:: Option[a]->Bool                        => S|blue/origami/asm/APIs|isNone
|?:: (Option[a],a)->a                          => X|orElse
forEach:: (Option[a],a->())->()                => S|blue/origami/asm/APIs|forEach
map:: (Option[a],a->b)->Option[b]              => S|blue/origami/asm/APIs|map
flatMap:: (Option[a],a->Option[b])->Option[b]  => S|blue/origami/asm/APIs|flatMap

Some:: Bool->Option[Bool]                      => S|blue/origami/asm/APIs|box
<---:: Option[Bool]->Bool                      => S|blue/origami/asm/APIs|unwrapZ
Some:: Int->Option[Int]                        => S|blue/origami/asm/APIs|box
<---:: Option[Int]->Int                        => S|blue/origami/asm/APIs|unwrapI
Some:: Float->Option[Float]                    => S|blue/origami/asm/APIs|box
<---:: Option[Float]->Float                    => S|blue/origami/asm/APIs|unwrapD
