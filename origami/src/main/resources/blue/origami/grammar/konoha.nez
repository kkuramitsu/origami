/**
 * Konoha Grammar
 *  Static script language designed by K. Kuramitsu
 *
 * [1]
 *
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */

File                               = _ { $(TopLevel)* #Source } _ EOF

/* Code Layout (Whitespace) */
_                                  = ( S / BLOCKCOMMENT / LINECOMMENT )*
//__                                 = !S
S                                  = [ \n\r\t\u000B\u000C]
BLOCKCOMMENT                       = '/*' ( !'*/' . )* '*/'
LINECOMMENT                        = '//' ( !'\n' . )*
EOL                                = '\r'? '\n'
                                   / EOF
EOF                                = !.
TODO                               = !''

/* Operators */
"++"                               = '++' _
"--"                               = '--' _
"&"                                = '&' ![&=] _
"*"                                = '*' !'=' _
"+"                                = '+' ![+=] _
"-"                                = '-' !( '-' / [=>] ) _
"~"                                = '~' _
"!"                                = '!' !'=' _
"{"                                = '{' _
"["                                = '[' _
"]"                                = ']' _
","                                = ',' _
"..."                              = '...' _
":"                                = ':' ![>:] _
"::"                               = '::' _
"/"                                = '/' !'=' _
"%"                                = '%' ![=>] _
"<<"                               = '<<' !'=' _
">>"                               = '>>' ![=>] _
">>>"                              = '>>>' !'=' _
"<="                               = '<=' _
">="                               = '>=' _
"<"                                = '<' ![=] _
">"                                = '>' ![=] _
"=="                               = '==' _
"!="                               = '!=' _
"^"                                = '^' ![=] _
"|"                                = '|' ![|=] _
"&&"                               = '&&' _
"||"                               = '||' _
"?"                                = '?' _
";"                                = ';' _
"}"                                = '}' _
"*="                               = '*=' _
"/="                               = '/=' _
"%="                               = '%=' _
"+="                               = '+=' _
"-="                               = '-=' _
"<<="                              = '<<=' _
">>="                              = '>>=' _
">>>="                             = '>>>=' _
"&="                               = '&=' _
"^="                               = '^=' _
"|="                               = '|=' _
"="                                = '=' !'=' _
"."                                = '.' !'.' _
"("                                = '(' _
")"                                = ')' _
"@"                                = '@' _
"->"                               = '->' _

// reserved keyword
"abstract"                         = 'abstract' !W _
"assert"                           = 'assert' !W _
"boolean"                          = 'boolean' !W _
"break"                            = 'break' !W _
"byte"                             = 'byte' !W _
"case"                             = 'case' !W _
"catch"                            = 'catch' !W _
"char"                             = 'char' !W _
"class"                            = 'class' !W _
"const"                            = 'const' !W _
"continue"                         = 'continue' !W _
"default"                          = 'default' !W _
"defined"                          = 'defined' !W _
"do"                               = 'do' !W _
"double"                           = 'double' !W _
"else"                             = 'else' !W _
"enum"                             = 'enum' !W _
"extends"                          = 'extends' !W _
"false"                            = 'false' !W _
"final"                            = 'final' !W _
"finally"                          = 'finally' !W _
"float"                            = 'float' !W _
"for"                              = 'for' !W _
"function"                         = 'function' !W _
"goto"                             = 'goto' !W _
"if"                               = 'if' !W _
"implements"                       = 'implements' !W _
"import"                           = 'import' !W _
"in"                               = 'in' !W _
"instanceof"                       = 'instanceof' !W _
"int"                              = 'int' !W _
"interface"                        = 'interface' !W _
"let"                              = 'let' !W _
"long"                             = 'long' !W _
"new"                              = 'new' !W _
"null"                             = 'null' !W _
"private"                          = 'private' !W _
"protected"                        = 'protected' !W _
"public"                           = 'public' !W _
"return"                           = 'return' !W _
"short"                            = 'short' !W _
"static"                           = 'static' !W _
"super"                            = 'super' !W _
"switch"                           = 'switch' !W _
"synchronized"                     = 'synchronized' !W _
"this"                             = 'this' !W _
"throw"                            = 'throw' !W _
"throws"                           = 'throws' !W _
"transient"                        = 'transient' !W _
"true"                             = 'true' !W _
"try"                              = 'try' !W _
"typeof"                           = 'typeof' !W _
"var"                              = 'var' !W _
"void"                             = 'void' !W _
"while"                            = 'while' !W _

KEYWORD                            = "abstract"
                                   / "assert"
                                   / "boolean"
                                   / "break"
                                   / "byte"
                                   / "case"
                                   / "catch"
                                   / "char"
                                   / "class"
                                   / "const"
                                   / "continue"
                                   / "default"
                                   / "double"
                                   / "do"
                                   / "else"
                                   / "enum"
                                   / "extends"
                                   / "false"
                                   / "final"
                                   / "finally"
                                   / "float"
                                   / "for"
                                   / "goto"
                                   / "if"
                                   / "implements"
                                   / "import"
                                   / "instanceof"
                                   / "interface"
                                   / "int"
                                   / "long"
                                   / "new"
                                   / "null"
                                   / "private"
                                   / "protected"
                                   / "public"
                                   / "return"
                                   / "short"
                                   / "static"
                                   / "super"
                                   / "switch"
                                   / "synchronized"
                                   / "this"
                                   / "throws"
                                   / "throw"
                                   / "true"
                                   / "try"
                                   / "void"
                                   / "while"

/* Annotation */
Modifiers                          = { $(Annotation)+ #Modifiers }
Annotation                         = "@" { $(QualifiedName) "(" $(ElementValuePairList)? ")" #Annotation }
                                   / "@" { $(QualifiedName) "(" $(ElementValue) ")" #Annotation }
                                   / "@" { $(QualifiedName) #Annotation }
ElementValuePairList               = { $(ElementValuePair) ( "," $(ElementValuePair) )* #CommaList }
ElementValuePair                   = { $(Identifier) "=" $(ElementValue) #KeyValue }
ElementValue                       = ElementValueArrayInitializer
                                   / ConditionalExpression
                                   / Annotation
ElementValueArrayInitializer       = "{" { _ElementValueList? ","? "}" #List }
_ElementValueList                   = $(ElementValue) ( "," $(ElementValue) )*

example Modifiers ~e738bca1 @A @A(1) @A(key=value)

/* TopLevel */
TopLevel                           = Declaration
                                   / Statement

Declaration                        = ImportDeclaration
                                   / ClassDeclaration
                                   / EnumDeclaration
                                   / FunctionDeclaration
                                   / InterfaceDeclaration
                                   / VariableDeclaration EOS

// import
ImportDeclaration                  = { "import" $name(PackageName) #ImportDecl } EOS
PackageName                        = QualifiedName {$ "." "*" #WildCardName }?

// class
ClassDeclaration                   = { $anno(Modifiers)? "class" $name(Identifier) $_(TypeParameters)? $super(SuperClass)? $impl(SuperInterfaces)? $body(ClassBody) #ClassDecl }
SuperClass                         = "extends" ClassType
SuperInterfaces                    = "implements" ClassTypes
ClassBody                          = "{" { $(ClassBodyDeclaration)* #BlockStmt } "}"
ClassBodyDeclaration               = ClassMemberDeclaration
                                   / TODO { $(Block) #InstanceInisializer }
                                   / TODO "static" { $(Block) #StaticInitializer }
                                   / ConstructorDeclaration

ClassMemberDeclaration             = FieldDeclaration
                                   / MethodDeclaration
                                   / ClassDeclaration
                                   / InterfaceDeclaration
                                   / EOS+ { #EmptyStmt }

//interface, annotation type
InterfaceDeclaration               = { $anno(Modifiers)? "interface" $name(Identifier) $_(TypeParameters)? $super(SuperClass)? $body(InterfaceBody) #InterfaceDecl }
ExtendsInterfaces                  = "extends" ClassTypes
InterfaceBody                      = "{" { $(InterfaceMemberDeclaration)* #BlockStmt } "}"
InterfaceMemberDeclaration         = InterfaceMethodDeclaration
                                   / EOS { #EmptyStmt }

example ClassDeclaration ~90f038b '''
class C {
}
'''

example ClassDeclaration ~43b80c8 '''
class C extends D {
}
'''

example ClassDeclaration ~e59260 '''
class C extends D implements E, F {
}
'''

example ClassDeclaration ~058e8d '''
class C {
	C() {
	}
	C f;
	void f() {
	}
}
'''

example InterfaceDeclaration ~e1dd4b '''
interface C {
	void f();
}
'''

// enum
EnumDeclaration                    = { $anno(Modifiers)? "enum" $name(Identifier) $impl(SuperInterfaces)* $body(EnumBody) #EnumDecl }
EnumBody                           = "{" { ($(Enumerator) ( "," $(Enumerator) )* )? ","? ";"? #List } "}"
Enumerator                         = { $anno(Modifiers)? $name(Identifier) #Enum }

example EnumDeclaration ~2c8300 '''
enum C {
	A,B,C,
}
'''

//local variable
VariableDeclaration                = { "var" $name(Identifier) (":" $type(Type))? ( "=" $expr(Expression) )? #VarDecl }
                                   / { $anno(Modifiers)? $type(Type) $name(VarName) !"," ( "=" $expr(Expression) )? !"," #VarDecl }
                                   / { $anno(Modifiers)? $type(Type) $list(InitDeclList) #MultiVarDecl }
InitDeclList                       = { $(InitDecl) ( "," $(InitDecl) )* #List }
InitDecl                           = { $name(VarName) ( "=" $expr(Expression) )? #VarDecl }
VarName                            = Identifier {$name "[" $param(ConstantExpression)? "]" #ArrayName }*

/* Variable Declraration */

example VariableDeclaration ~2c32bbd '''
int a = 1
'''

example VariableDeclaration ~ed4370b '''
int a = 1, b
'''

example VariableDeclaration ~b34575 '''
int[] anArray = {
    1, 2,
    3, 4
}
'''

example VariableDeclaration ~aaa2f9 '''
String[][] names = {
  {"Mr. ", "Mrs. ", "Ms. "},
  {"Smith", "Jones"}
}
'''

//field, constant
FieldDeclaration                   = { $anno(Modifiers)? $type(Type) $list(InitDeclList) #FieldDecl } EOS

//method
MethodDeclaration                  = { $anno(Modifiers)? ( $(TypeParameters) $anno(Modifiers)? )? $type(TypeOrVoid) $name(Identifier) "(" $param(ParamList) ")" $throws(Throws)? ($body(Block) / EOS) #MethodDecl }
InterfaceMethodDeclaration         = { $anno(Modifiers)? ( $(TypeParameters) $anno(Modifiers)? )? $type(TypeOrVoid) $name(Identifier) "(" $param(ParamList) ")" $throws(Throws)? ($body(Block) / EOS) #InterfaceMethodDecl }
ParamList                          = { ( $(MethodParam) "," )* $(VarParam) #List }
                                   / { ( $(MethodParam) ( "," $(MethodParam) )* )? #List }
MethodParam                        = { $anno(Modifiers)? $type(Type) $name(VarName) #Param }
                                   / { $name(Identifier) (":" $type(Type) )? #Param }
VarParam                           = { $anno(Modifiers)? $(Type) "..." $(VarName) #VarParam }
Throws                             = "throws" { $(ClassTypes) #Throws }

//constructor
ConstructorDeclaration             = { $anno(Modifiers)? $type(ReferenceType) "(" $param(ParamList) ")" $throws(Throws)? $body(ConstructorBody) #Constructor }
ConstructorBody                    = "{" { $(ExplicitConstructorInvocation)? ( $(Statement) / $(Declaration) )* #Block } "}"
ExplicitConstructorInvocation      = { $(TypeArguments)? $({ $(This) "(" _ArgumentExpressionList? ")" #List }) #ExplicitConstructorInvocation } EOS
                                   / { $(TypeArguments)? $({ $(Super) "(" _ArgumentExpressionList? ")" #List }) #ExplicitConstructorInvocation } EOS
                                   / { $(PostfixExpression) "." $(TypeArguments)? $(Super) $({ "(" _ArgumentExpressionList? ")" #List }) #ExplicitConstructorInvocation } EOS

//
FunctionDeclaration                = { $anno(Modifiers)? "function" $name(Identifier) "(" $param(ParamList) ")" $type(":" TypeOrVoid)? $body(Block) #FuncDecl }
                                   / { "let" $name(Identifier) $param(ParamList) "=" $body(LambdaBody) #FuncDecl}
                                   / { $anno(Modifiers)? ( $(TypeParameters) $anno(Modifiers)? )? $type(TypeOrVoid) $name(Identifier) "(" $param(ParamList) ")" $throws(Throws)? ($body(Block) / EOS) #FuncDecl }

// Lambda
LambdaExpression                   = { "function" $name(Identifier)? "(" $param(ParamList) ")" $type(":" TypeOrVoid)? $body(Block) #Lambda }
                                   / { $param(LambdaParameters) "->" $body(LambdaBody) #Lambda }
LambdaParameters                   = Identifier / "(" ParamList ")"
LambdaBody                         = !'{' { $(LambdaReturn) #Block}
                                   / Block
LambdaReturn                       = { $expr(Expression) #Return }

example FunctionDeclaration ~ae75e55 '''
int fibo(int n) {
	if(n < 3) return 1;
	return fibo(n-1)+fibo(n-2);
}
'''

example FunctionDeclaration ~bd26e9 '''
function fibo(n :int) :int {
	if(n < 3) return 1;
	return fibo(n-1)+fibo(n-2);
}
'''

example FunctionDeclaration ~f59b67 '''
function fibo(n) {
	if(n < 3) return 1;
	return fibo(n-1)+fibo(n-2);
}
'''

/* Types, Values, Variables */
Type                               = "typeof" "(" { $expr(Expression) #TypeOf } ")"
                                   / ReferenceType
                                   / PrimitiveType
PrimitiveType                      = { $anno(Modifiers) $(UnannoPrimitiveType) #Annotated }
                                   / UnannoPrimitiveType
UnannoPrimitiveType                = NumericType
                                   / BooleanType
NumericType                        = IntegralType
                                   / FloatingPointType
IntegralType                       = { 'byte' !W #Name } _
                                   / { 'char' !W #Name } _
                                   / { 'short' !W #Name } _
                                   / { 'int' !W #Name } _
                                   / { 'long' !W #Name } _
FloatingPointType                  = { 'float' !W #Name } _
                                   / { 'double' !W #Name } _
BooleanType                        = { 'boolean' !W #Name } _
ReferenceType                      = ArrayType
                                   / ClassType
                                   / TypeVariable
ArrayType                          = (PrimitiveType / ClassType / TypeVariable) {$base "[" "]" #ArrayType }+

ClassType                          = QualifiedName {$base $param(TypeArguments) #GenericType }?

TypeVariable                       = { $anno(Modifiers) $(Identifier) #Annotated }
                                   / Identifier
TypeParameter                      = { $anno(Modifiers) $(UnannoTypeParameter) #Annotated }
                                   / UnannoTypeParameter
UnannoTypeParameter                = Identifier {$base "extends" $extends(ClassType) ( "&" $(ClassType) )* #TypeBound }?
TypeParameters                     = { "<" $(TypeParameter) ( "," $(TypeParameter) )* ">" #TypeLists }
TypeArguments                      = { "<" ( $(TypeArgument) ( "," $(TypeArgument) )* )? ">" #TypeArguments }
TypeArgument                       = TypeOrVoid
                                   / { $anno(Modifiers)? "?" #TWildCard } {$ ("extends" #UpperBound / "super" #LowerBound) $(ReferenceType) }?
Void                               = { 'void' !W #VoidType } _
TypeOrVoid                         = Type
                                   / Void
NonArrayType                       = ClassType
                                   / PrimitiveType
ClassTypes                         = { $(ClassType) ( "," $(ClassType) )* #List }

example Type ~92625b '''
boolean
'''

example Type ~846903 '''
int
'''

example Type ~17a6db7 '''
int[]
'''

example Type ~113fe8 '''
int[][]
'''

example Type ~f0bbfb0 '''
Map<K,V>
'''

example Type ~cf7b83d '''
Map<K,V>[]
'''


// Block, Statement
//===================

EOS                                = ";" / &'}' / [ \t]* EOL _
Block                              = "{" { ( $(Statement) / $(LocalDeclaration) )* #Block } "}"
LocalDeclaration                   = VariableDeclaration EOS
                                   / ClassDeclaration

Statement                          = Block
                                   / { "assert" $cond(Expression) ( ":" $msg(Expression) )?  #Assert } EOS
                                   / { "if" "(" $cond(Expression) ")" $then(Statement) ( "else" $else(Statement) )? #If }
                                   / SwitchStatement
                                   / { "while" "(" $cond(Expression) ")" $body(Statement) #While }
                                   / { "do" $body(Statement) "while" "(" $cond(Expression) ")"  #DoWhile } EOS
                                   / { "for" "(" $init(Expression)? ";" $cond(Expression)? ";" $iter(Expression)? ")" $body(Statement) #For }
                                   / { "for" "(" $init(VariableDeclaration) ";" $cond(Expression)? ";" $iter(Expression)? ")" $body(Statement) #For }
                                   / { "for" "(" $anno(Modifiers)? ($type(Type) !"in" $name(Identifier) / $name(Identifier) ) ( ":" / "in" ) $iter(Expression) ")" $body(Statement) #ForEach }
                                   / { "continue" $label(Identifier)? #Continue `` } EOS
                                   / { "break" $label(Identifier)? #Break `` } EOS
                                   / { "return" $expr(Expression)? #Return } EOS
                                   / TryStatement
                                   / { "throw" $expr(Expression) #Throw } EOS
                                   / "synchronized" { "(" $cond(Expression) ")" $body(Block) #Synchronized }
                                   / { $label(Identifier) ":" #Label }
                                   / Expression EOS
                                   / EOS+ { #Empty }

example Block ~783b5 '''
{
}
'''

example Block ~ff5ad2 '''
{
	a;
}
'''

example Block ~ff5ad2 '''
{
	a // semicolon
}
'''

example Block ~fd6abb '''
{
	a;
	a;
}
'''

example Block ~8dd2bc '''
{
  var n = 1;
}
'''

example Statement ~ba89507 '''
if(c) {
}
'''

example Statement ~647bfb '''
if(c) {
}
else {
}
'''

example Statement ~0486fa5 '''
while(c) {
}
'''

example Statement ~4183a44 '''
do {
}
while(c)
'''

example Statement ~cad6ebf '''
for(;;) {
}
'''

example Statement ~02dac67 '''
for(String s: list) {
}
'''

example Statement ~16c87b '''
for(s in list) {
}
'''

example Statement ~8367e4 '''
return;
'''

example Statement ~7a436b '''
break;
'''

example Statement ~375526 '''
continue;
'''

example Statement ~e353c1c '''
throw e;
'''

example Statement ~f284dc08 '''
assert (c);
'''

example Statement ~0e8ce1f '''
try {
}
catch(e) {
}
'''

example Statement ~9434bd '''
try {
}
finally {
}
'''

example Statement ~0d9029 '''
try {
}
catch(e) {
}
finally {
}
'''

// try/catch
TryStatement                       = { "try" $try(Block) $catch(CatchBlock) ( "finally" $finally(Block) )? #Try }
CatchBlock                         = { $(Catch)* #List }
Catch                              = { "catch" "(" $anno(Modifiers)? _CatchParameter ")" $body(Block) #Catch }
_CatchParameter                    = $type(ClassType) $name(Identifier) / $name(Identifier)


// switch
SwitchStatement                    = { "switch" "(" $cond(Expression) ")" $body(SwitchBlock) #Switch }
SwitchBlock                        = "{" { ($(SwitchCondition) / $(Statement) / $(LocalDeclaration) )+ #Block } "}"
SwitchCondition                    = { "case" $cond(ConstantExpression) ":" $body(CaseBlock) #SwitchCase }
                                   / { "default" ":" $body(CaseBlock) #SwitchDefault }
CaseBlock                          = { ( !"case" !"default" ($(Statement) / $(LocalDeclaration)) )* #Block }

example SwitchStatement ~41dd47e '''
switch(c) {
case 0:
	return false;
case 1:
	return true;
}
'''

example SwitchStatement ~306db9 '''
switch(c) {
case 0:
case 1:
	return true;
default:
	return false;
}
'''

/* Expression */
Expressions                        = { $(Expression) ( "," $(Expression) )* #List }
Expression                         = LambdaExpression
                                   / "typeof" "(" { $expr(Expression) #TypeOf } ")"
                                   / AssignmentExpression
AssignmentExpression               = { $left(UnaryExpression) _AssignmentOperator $right(Expression) }
                                   / ConditionalExpression
_AssignmentOperator                = "=" #Assign
                                   / "*=" #AssignMul
                                   / "/=" #AssignDiv
                                   / "%=" #AssignMod
                                   / "+=" #AssignAdd
                                   / "-=" #AssignSub
                                   / "<<=" #AssignLeftShift
                                   / ">>=" #AssignRightShift
                                   / ">>>=" #AssignLogicalRightShift
                                   / "&=" #AssignBitwiseAnd
                                   / "^=" #AssignBitwiseXOr
                                   / "|=" #AssignBitwiseOr
ConstantExpression                 = ConditionalExpression
ConditionalExpression              = LogicalOrExpression {$cond "?" $then(Expression) ":" $else(LogicalOrExpression) #Conditional }*
LogicalOrExpression                = LogicalAndExpression {$left "||" $right(LogicalAndExpression) #Or }*
LogicalAndExpression               = InclusiveOrExpression {$left "&&" $right(InclusiveOrExpression) #And }*
InclusiveOrExpression              = ExclusiveOrExpression {$left "|" $right(ExclusiveOrExpression) #BitwiseOr }*
ExclusiveOrExpression              = AndExpression {$left "^" $right(AndExpression) #BitwiseXor }*
AndExpression                      = EqualityExpression {$left "&" $right(EqualityExpression) #BitwiseAnd }*

EqualityExpression                 = RelationalExpression {$left _EqualityOperator $right(RelationalExpression) }*
_EqualityOperator                  = "==" #Equals
                                   / "!=" #NotEquals

RelationalExpression               = ShiftExpression {$left _RelationalOperator $right(ShiftExpression) }*
_RelationalOperator                 = "<=" #LessThanEquals
                                   / ">=" #GreaterThanEquals
                                   / "<" #LessThan
                                   / ">" #GreaterThan
                                   / "instanceof" #InstanceOf

ShiftExpression                    = AdditiveExpression {$left ("<<" #LeftShift / ">>" #RightShift / ">>>" #LogicalRightShift) $right(AdditiveExpression) }*
AdditiveExpression                 = MultiplicativeExpression {$left ("+" #Add / "-" #Sub) $right(MultiplicativeExpression) }*
MultiplicativeExpression           = CastNewExpression {$left ("*" #Mul / "/" #Div / "%" #Mod) $right(CastNewExpression) }*
CastNewExpression                  = { "(" $type(Type) ")" $expr(CastNewExpression) #Cast }
                                   / UnaryExpression

UnaryExpression                    = PostfixExpression
                                   / { "++" $expr(UnaryExpression) #PreInc }
                                   / { "--" $expr(UnaryExpression) #PreDec }
                                   / { "+" $expr(CastNewExpression) #Plus }
                                   / { "-" $expr(CastNewExpression) #Minus }
                                   / { "~" $expr(CastNewExpression) #Compl }
                                   / { "!" $expr(CastNewExpression) #Not }

PostfixExpression                  = PrimaryExpression {$recv _MethodCall / _Index / _Field / _Inc / _Dec }*
_MethodCall                        = "." $(TypeArguments)? $name(Identifier) $param(ArgumentExpressionList) #MethodApply
ArgumentExpressionList             = { "(" _ArgumentExpressionList? ")" #List }
_ArgumentExpressionList           = $(Expression) ( "," $(Expression) )*
_Index                             = "[" $param({ $(Expression) #List}) "]" #Indexer
_Field                             = "." $name(Identifier) !'(' #Field
_Inc                               = "++" #Inc
_Dec                               = "--" #Dec

PrimaryExpression                  = Constant
                                   / ScriptLiteral
                                   / "(" Expression ")"
                                   / This
                                   / Super
                                   / MethodInvocationExpression
                                   / InstanceCreationExpression
                                   / ArrayCreationExpression
                                   / Identifier
This                               = { "this" #This `` }
Super                              = { "super" #Super `` }
MethodInvocationExpression         = { $name(Identifier) $param(ArgumentExpressionList) #Apply }
InstanceCreationExpression         = { "new" $type(ClassType) $param(ArgumentExpressionList) $body(ClassBody)? #New }
ArrayCreationExpression            = { "new" $type(NonArrayType {$base "[" $size(Expression) "]" #ArrayType }+ {$ "[" "]" #ArrayType }*) #NewArray }
                                   / { "new" $type(NonArrayType {$base "[" "]" #ArrayType }+) $(ArrayLiteral) #NewArray }

example Expression ~46f038 x=y
example Expression ~8e03b0 x+=y

example Expression ~2e22a4 c?x:y
example Expression ~7ac13c x<<y
example Expression ~5c9153 x>>y
example Expression ~dea67f x|y
example Expression ~7f3ecc x&y
example Expression ~78b953 x^y
example Expression ~f21916 ~x
example Expression ~006e0a x&&y
example Expression ~b60455 x||y
example Expression ~51b2b2 !x

example Expression ~b0be29 x==y
example Expression ~f89dae x!=y
example Expression ~ad9f44 x<y
example Expression ~37ebeb x<=y
example Expression ~221a3f x>y
example Expression ~deab07 x>=y

example Expression ~ae662a x+y
example Expression ~c44c31 x-y
example Expression ~fa8a6a x*y
example Expression ~fef7c3 x/y
example Expression ~9d52c0 x%y

example Expression ~19b8c5 ++x
example Expression ~e5ac7b --x

example Expression ~5f409e x++
example Expression ~5ea82d x--
example Expression ~818a5e x.f
example Expression ~d2ef25 x.f()
example Expression ~761b3a x.f(y)
example Expression ~86da20 x[y]
example Expression ~857fc8 x.f.z
example Expression ~1b4244 x.f().z
example Expression ~f5f3c9 x.f(y).z

example Expression ~089e532 this
example Expression ~f88ac2a super

/* ScriptLiteral */

ScriptLiteral                      = ArrayLiteral
                                   / ObjectLiteral
                                   / RegularExpression


ArrayLiteral                       = { "[" ("," / $(Expression))* "]" #Array }

ObjectLiteral                      = { "{" (($(PropertyAssignment) ("," $(PropertyAssignment))*) / ":")  "}" #Object }
                                   / { "{" ("," / $(Expression))* "}" #Set }
PropertyAssignment                 = { $key(PropertyName) ":" $value(Expression) #$ }
PropertyName                       = StringLiteral
                                   / CharacterLiteral
                                   / Identifier

TripleLiteral                      = '\'\'\'' { $(TripleContent)* #Interpolation } '\'\'\''
TripleContent                      = '${' Expression '}'
                                   / '$[' Expression ']'
                                   / { (!'\'\'\'' !'${' !'$[' .)* #Text }

example TripleLiteral&Expression ~6828079 ```
'''Apple ${Computer} Inc.'''
```

/* Regular Expression */

RegularExpression               = { '/' REGEX_BODY '/' REGEX_FLAGS #RegExp }
REGEX_BODY                      = REGEX_FIRST_CHAR REGEX_CHAR*
REGEX_FIRST_CHAR                = REGEX_BACKSLASH_SEQUENCE
                                / ![*\\/\x5b] REGEX_NON_TERMINATOR
                                / REGEX_CLASS
REGEX_CHAR                      = '*'
                                / REGEX_FIRST_CHAR
REGEX_BACKSLASH_SEQUENCE        = '\\' REGEX_NON_TERMINATOR
REGEX_NON_TERMINATOR            = !'\n' .
REGEX_CLASS                     = '[' REGEX_CLASS_CHAR* ']'
REGEX_CLASS_CHAR                = ![\x5d\\] REGEX_NON_TERMINATOR
                                / REGEX_BACKSLASH_SEQUENCE
REGEX_FLAGS                     = [gimsy]*


/* Identifier */
//Name
//	= { NAME #Name } _
Identifier                         = { NAME #Name } _
QualifiedName                      = Identifier {$prefix "." $name(Identifier) #QualifiedName }*
W                                  = [a-zA-Z0-9_$]
NAME                               = !DIGIT !( KEYWORD !W ) W+

example Identifier ~fdb0513 '''
Apple
'''

example Identifier ~a47e9fd '''
x
'''

example Identifier ~a47e9fdb '''
x.Apple
'''

example QualifiedName ~9f81b2b '''
x.Apple.x
'''


/* Literal, Constant */
Literal                            = FloatingPointLiteral
                                   / IntegerLiteral
                                   / BooleanLiteral
                                   / TripleLiteral
                                   / CharacterLiteral
                                   / StringLiteral
                                   / NullLiteral
Constant                           = Literal
NullLiteral                        = { #Null "null" } 
BooleanLiteral                     = { #True } "true"
                                   / { #False } "false"
IntegerLiteral                     = { (DECIMAL / HEXADECIMAL / BINARY / OCTAL) (INT_SUFFIX #Long / FLOAT_SUFFIX #Float / #Integer) } _
DECIMAL                            = '0' ![bBxX0-9_]
                                   / [1-9] ( '_'* DIGIT )*
HEXADECIMAL                        = '0' [xX] HEX ( '_'* HEX )*
BINARY                             = '0' [bB] [01] ( '_'* [01] )*
OCTAL                              = '0' ( '_'* [0-7] )*
DIGIT                              = [0-9]
HEX                                = [a-fA-F0-9]
INT_SUFFIX                         = [lL]
FloatingPointLiteral               = { FLOAT #Double (FLOAT_SUFFIX #Float)? }  _
                                   / { DECIMAL #Double } FLOAT_SUFFIX _
FLOAT                              = FRACTION EXPONENT?
                                   / DIGIT+ EXPONENT
FLOAT_SUFFIX                       = [fFdD]
FRACTION                           = !'_' ( '_'* DIGIT )* '.' DIGIT ( '_'* DIGIT )*
                                   / DIGIT ( '_'* DIGIT )* '.'
EXPONENT                           = [eE] [+\-]? DIGIT ( '_'* DIGIT )*
StringLiteral                      = '"' { STRING_CONTENT* #String } '"' _
CharacterLiteral                   = '\'' { CHAR_CONTENT* #Character } '\'' _
STRING_CONTENT                     = ESCAPE
                                   / ![\"\n\\] .
CHAR_CONTENT                       = ESCAPE
                                   / !['\n\\] .
ESCAPE                             = SIMPLE_ESCAPE
                                   / OCTAL_ESCAPE
                                   / HEX_ESCAPE
SIMPLE_ESCAPE                      = '\\' ['\"\\bfnrt]
OCTAL_ESCAPE                       = '\\' [0-3] [0-7] [0-7]
                                   / '\\' [0-7] [0-7]
                                   / '\\' [0-7]
HEX_ESCAPE                         = '\\' 'u'+ HEX4
HEX4                               = HEX HEX HEX HEX

/* Example */

// The traditional "Hello, world!" program can be written in Java
example File ~5163c3f '''
System.out.println("Hello World!"); // Prints the string to the console.
'''


/* Statement */

example Statement ~fdb78a '''
if(c);
'''

example Statement ~ba8950 '''
if(c) {
}
'''

/* Expression (standard) */

example Expression ~dd2c50 1+2*3
example Expression  ~1da9fb 1*2+3
example Expression ~954e69 (1+2)*3
example Expression  ~4e2150 1+2-3*4%5


/* Expression (local) */

example Expression ~9b901ac '''
() -> {
  System.out.println("example");
}
'''

/* Identifier (standard) */

example Expression ~a47e9fd '''
x
'''

example Expression  ~fdb051 '''
Apple
'''

/* Literal (standard) */

example Literal ~bb9623 '''
null
'''

example Literal ~03365ce '''
true
'''

example Literal ~4fe5ea '''
false
'''

example Literal ~ec2775 '''
'C'
'''

example Literal ~1951c6 '''
0
'''

example Literal ~aef181 '''
26
'''

example Literal ~c3b9d6 '''
0x1a
'''

example Literal ~146f59 '''
0b11010
'''

example Literal ~f74a78 '''
123.4
'''

example Literal ~94b99c '''
1.234e2
'''

example Literal ~c83c217 '''
123.4f
'''

example Literal ~02bf7f6 '''
"hello,world\n"
'''

/* Literal (standard) */

example Literal ~db9f5e3 '''
"S\u00ED Se\u00F1or"
'''

// formatted by $ nez format
